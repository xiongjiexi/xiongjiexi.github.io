(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{385:function(t,a,s){t.exports=s.p+"assets/img/git_opr.36c10cc6.png"},386:function(t,a,s){t.exports=s.p+"assets/img/git_data_transport_cmd.b349b227.png"},479:function(t,a,s){"use strict";s.r(a);var e=s(42),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),e("p"),e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#团队中使用git的操作说明"}},[t._v("团队中使用git的操作说明")]),e("ul",[e("li",[e("a",{attrs:{href:"#说明使用git的流程-以及相关问题"}},[t._v("说明使用git的流程, 以及相关问题")])]),e("li",[e("a",{attrs:{href:"#给出使用流程图"}},[t._v("给出使用流程图")])])])]),e("li",[e("a",{attrs:{href:"#示意图"}},[t._v("示意图")]),e("ul",[e("li",[e("a",{attrs:{href:"#git操作示意图"}},[t._v("git操作示意图")])]),e("li",[e("a",{attrs:{href:"#git命令数据流转图"}},[t._v("git命令数据流转图")])])])]),e("li",[e("a",{attrs:{href:"#日常操作【配置、忽略】"}},[t._v("日常操作【配置、忽略】")]),e("ul",[e("li",[e("a",{attrs:{href:"#dns问题导致无法访问github-1"}},[t._v("DNS问题导致无法访问GitHub(1)")])]),e("li",[e("a",{attrs:{href:"#dns问题导致无法访问github-2"}},[t._v("DNS问题导致无法访问GitHub(2)")])]),e("li",[e("a",{attrs:{href:"#远程仓库配置ssh-key"}},[t._v("远程仓库配置ssh key")])]),e("li",[e("a",{attrs:{href:"#修改已经提交的author信息"}},[t._v("修改已经提交的author信息")])]),e("li",[e("a",{attrs:{href:"#修改name-email等config信息"}},[t._v("修改name/email等config信息")])]),e("li",[e("a",{attrs:{href:"#生成新的ssh-key"}},[t._v("生成新的ssh key")])]),e("li",[e("a",{attrs:{href:"#配置github多账号使用"}},[t._v("配置github多账号使用")])]),e("li",[e("a",{attrs:{href:"#使用ssh连接替换https连接"}},[t._v("使用ssh连接替换https连接")])]),e("li",[e("a",{attrs:{href:"#git-pull时出现unable-to-get-local-issuer-certificate报错"}},[t._v("git pull时出现unable to get local issuer certificate报错")])]),e("li",[e("a",{attrs:{href:"#gitk-git-gui中文乱码问题"}},[t._v("gitk/git gui中文乱码问题")])]),e("li",[e("a",{attrs:{href:"#忽略文件"}},[t._v("忽略文件")])]),e("li",[e("a",{attrs:{href:"#从远程clone时指定文件夹名-不用项目名"}},[t._v("从远程clone时指定文件夹名（不用项目名）")])])])]),e("li",[e("a",{attrs:{href:"#日常操作【查看】"}},[t._v("日常操作【查看】")]),e("ul",[e("li",[e("a",{attrs:{href:"#查看某个文件的详细修改记录"}},[t._v("查看某个文件的详细修改记录")])]),e("li",[e("a",{attrs:{href:"#git-status说明"}},[t._v("git status说明")])]),e("li",[e("a",{attrs:{href:"#优化git-log输出样式"}},[t._v("优化git log输出样式")])])])]),e("li",[e("a",{attrs:{href:"#日常操作【分支、拉取、更新】"}},[t._v("日常操作【分支、拉取、更新】")]),e("ul",[e("li",[e("a",{attrs:{href:"#远程和本地都新建了一个仓库-但两个仓库都进行了初始化操作-此时无法同步两个仓库"}},[t._v("远程和本地都新建了一个仓库, 但两个仓库都进行了初始化操作, 此时无法同步两个仓库")])]),e("li",[e("a",{attrs:{href:"#更新远程仓库的单个文件-指定文件"}},[t._v("更新远程仓库的单个文件/指定文件")])]),e("li",[e("a",{attrs:{href:"#查看所有的分支-包括远程分支"}},[t._v("查看所有的分支, 包括远程分支")])]),e("li",[e("a",{attrs:{href:"#拉取指定的远程分支"}},[t._v("拉取指定的远程分支")])]),e("li",[e("a",{attrs:{href:"#合并指定的远程分支"}},[t._v("合并指定的远程分支")])]),e("li",[e("a",{attrs:{href:"#切换其他远程分支-拉取远程没有的分支"}},[t._v("切换其他远程分支，拉取远程没有的分支")])]),e("li",[e("a",{attrs:{href:"#新建分支的几种方式"}},[t._v("新建分支的几种方式")])]),e("li",[e("a",{attrs:{href:"#修改分支名"}},[t._v("修改分支名")])]),e("li",[e("a",{attrs:{href:"#删除分支"}},[t._v("删除分支")])]),e("li",[e("a",{attrs:{href:"#git批量删除本地分支"}},[t._v("git批量删除本地分支")])])])]),e("li",[e("a",{attrs:{href:"#日常操作【提交、推送】"}},[t._v("日常操作【提交、推送】")]),e("ul",[e("li",[e("a",{attrs:{href:"#push-u-的用法"}},[t._v("push -u 的用法")])]),e("li",[e("a",{attrs:{href:"#git-add-u-git-add-a"}},[t._v("git add -u/git add -A")])]),e("li",[e("a",{attrs:{href:"#有本地分支-没有远程分支-将本地推到远程上"}},[t._v("有本地分支, 没有远程分支, 将本地推到远程上")])]),e("li",[e("a",{attrs:{href:"#推送项目到新建的gitlab上"}},[t._v("推送项目到新建的gitlab上")])]),e("li",[e("a",{attrs:{href:"#项目提交远程仓库-但历史记录包含敏感信息或需要清空历史记录"}},[t._v("项目提交远程仓库, 但历史记录包含敏感信息或需要清空历史记录")])]),e("li",[e("a",{attrs:{href:"#提交合并到历史-非上一次-commit中"}},[t._v("提交合并到历史(非上一次)commit中")])]),e("li",[e("a",{attrs:{href:"#提交合并到上一次commit中"}},[t._v("提交合并到上一次commit中")])]),e("li",[e("a",{attrs:{href:"#git将多个commit合为一个"}},[t._v("git将多个commit合为一个")])]),e("li",[e("a",{attrs:{href:"#git作为镜像仓库-一个项目推送到多个远程仓库"}},[t._v("git作为镜像仓库/一个项目推送到多个远程仓库")])])])]),e("li",[e("a",{attrs:{href:"#日常操作【暂存】"}},[t._v("日常操作【暂存】")]),e("ul",[e("li",[e("a",{attrs:{href:"#查看stash中的内容"}},[t._v("查看stash中的内容")])]),e("li",[e("a",{attrs:{href:"#stash的相关操作"}},[t._v("stash的相关操作")])]),e("li",[e("a",{attrs:{href:"#stash使用技巧"}},[t._v("stash使用技巧")])]),e("li",[e("a",{attrs:{href:"#git-stash部分文件"}},[t._v("git stash部分文件")])])])]),e("li",[e("a",{attrs:{href:"#日常操作【撤销、回退】"}},[t._v("日常操作【撤销、回退】")]),e("ul",[e("li",[e("a",{attrs:{href:"#撤销工作区所有的修改"}},[t._v("撤销工作区所有的修改")])]),e("li",[e("a",{attrs:{href:"#恢复工作区删除的文件"}},[t._v("恢复工作区删除的文件")])]),e("li",[e("a",{attrs:{href:"#工作区做了修改-但没有提交到暂存区中-此时要撤销工作区的修改"}},[t._v("工作区做了修改, 但没有提交到暂存区中, 此时要撤销工作区的修改")])]),e("li",[e("a",{attrs:{href:"#恢复暂存区删除的文件"}},[t._v("恢复暂存区删除的文件")])]),e("li",[e("a",{attrs:{href:"#恢复工作区所有被修改的文件"}},[t._v("恢复工作区所有被修改的文件")])]),e("li",[e("a",{attrs:{href:"#删除git关联-本地代码"}},[t._v("删除git关联(本地代码)")])]),e("li",[e("a",{attrs:{href:"#清除untracked-files"}},[t._v("清除untracked files")])]),e("li",[e("a",{attrs:{href:"#撤回add到暂存区中的文件"}},[t._v("撤回add到暂存区中的文件")])])])]),e("li",[e("a",{attrs:{href:"#git中的概念"}},[t._v("git中的概念")]),e("ul",[e("li",[e("a",{attrs:{href:"#head"}},[t._v("HEAD")])]),e("li",[e("a",{attrs:{href:"#fetch-head"}},[t._v("FETCH_HEAD")])]),e("li",[e("a",{attrs:{href:"#origin-head-origin-master"}},[t._v("origin/HEAD -> origin/master")])]),e("li",[e("a",{attrs:{href:"#超前ahead-落后behind"}},[t._v("超前ahead, 落后behind")])]),e("li",[e("a",{attrs:{href:"#staged-unstaged"}},[t._v("staged, unstaged")])])])]),e("li",[e("a",{attrs:{href:"#配置git-bash的ssh代理-解决连接问题-https方式也同样提供解决方案"}},[t._v("配置git bash的ssh代理，解决连接问题（https方式也同样提供解决方案）")]),e("ul",[e("li",[e("a",{attrs:{href:"#配置ssh方式代理"}},[t._v("配置ssh方式代理")])]),e("li",[e("a",{attrs:{href:"#设置https方式代理"}},[t._v("设置https方式代理")])])])]),e("li",[e("a",{attrs:{href:"#合理使用cherry-pick和rebase组合拳-谨慎使用revert"}},[t._v("合理使用cherry-pick和rebase组合拳，谨慎使用revert")]),e("ul",[e("li",[e("a",{attrs:{href:"#cherry-pick的使用"}},[t._v("cherry-pick的使用")])]),e("li",[e("a",{attrs:{href:"#rebase的使用"}},[t._v("rebase的使用：")])])])]),e("li",[e("a",{attrs:{href:"#配置命令简写"}},[t._v("配置命令简写")])]),e("li",[e("a",{attrs:{href:"#为什么merge时都建议加-no-ff"}},[t._v("为什么merge时都建议加-no-ff")]),e("ul",[e("li",[e("a",{attrs:{href:"#fast-forward"}},[t._v("fast-forward")])]),e("li",[e("a",{attrs:{href:"#no-ff"}},[t._v("-no-ff")])])])]),e("li",[e("a",{attrs:{href:"#revert之后你应该这样做"}},[t._v("revert之后你应该这样做")]),e("ul",[e("li",[e("a",{attrs:{href:"#一般什么时候你使用revert"}},[t._v("一般什么时候你使用revert?")])]),e("li",[e("a",{attrs:{href:"#revert之后如何处理"}},[t._v("revert之后如何处理")])])])]),e("li",[e("a",{attrs:{href:"#如何查询所有的config设置"}},[t._v("# 如何查询所有的config设置")])]),e("li",[e("a",{attrs:{href:"#config的使用"}},[t._v("config的使用")]),e("ul",[e("li",[e("a",{attrs:{href:"#如何筛选查询config设置"}},[t._v("如何筛选查询config设置")])]),e("li",[e("a",{attrs:{href:"#如何设置config"}},[t._v("如何设置config")])]),e("li",[e("a",{attrs:{href:"#删除config的设置"}},[t._v("删除config的设置")])]),e("li",[e("a",{attrs:{href:"#直接编辑config配置"}},[t._v("直接编辑config配置")])])])])])]),e("p"),t._v(" "),e("h2",{attrs:{id:"团队中使用git的操作说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#团队中使用git的操作说明"}},[t._v("#")]),t._v(" 团队中使用git的操作说明")]),t._v(" "),e("h3",{attrs:{id:"说明使用git的流程-以及相关问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说明使用git的流程-以及相关问题"}},[t._v("#")]),t._v(" 说明使用git的流程, 以及相关问题")]),t._v(" "),e("h3",{attrs:{id:"给出使用流程图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#给出使用流程图"}},[t._v("#")]),t._v(" 给出使用流程图")]),t._v(" "),e("h2",{attrs:{id:"示意图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#示意图"}},[t._v("#")]),t._v(" 示意图")]),t._v(" "),e("h3",{attrs:{id:"git操作示意图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git操作示意图"}},[t._v("#")]),t._v(" git操作示意图")]),t._v(" "),e("p",[e("img",{attrs:{src:s(385),alt:"git_opr.png"}})]),t._v(" "),e("h3",{attrs:{id:"git命令数据流转图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git命令数据流转图"}},[t._v("#")]),t._v(" git命令数据流转图")]),t._v(" "),e("p",[e("img",{attrs:{src:s(386),alt:"git_data_transport_cmd.png"}})]),t._v(" "),e("h2",{attrs:{id:"日常操作【配置、忽略】"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#日常操作【配置、忽略】"}},[t._v("#")]),t._v(" 日常操作【配置、忽略】")]),t._v(" "),e("h3",{attrs:{id:"dns问题导致无法访问github-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dns问题导致无法访问github-1"}},[t._v("#")]),t._v(" DNS问题导致无法访问GitHub(1)")]),t._v(" "),e("p",[t._v("因为dns问题无法访问GitHub时，使用git会出现提示：\nCould not resolve hostname github.com: Temporary failure in name resolution\n查看dns配置，配置新的nameserver即可。")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 检查是否能ping通github.com")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ping")]),t._v(" github.com\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ping不通，查看dns配置")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("vim")]),t._v(" /etc/resolv.conf\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 增加nameserver配置=>resolv.conf")]),t._v("\nnameserver "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.8")]),t._v(".8.8\nnameserver "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.8")]),t._v(".4.4\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启网络配置（以下为raspbian系统重启命令，各os不一样）")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),t._v(" networking restart\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# final：重启后用ping github.com检查")]),t._v("\n")])])]),e("h3",{attrs:{id:"dns问题导致无法访问github-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dns问题导致无法访问github-2"}},[t._v("#")]),t._v(" DNS问题导致无法访问GitHub(2)")]),t._v(" "),e("p",[t._v("执行"),e("code",[t._v("git push")]),t._v("或其他git命令时经常出现以下错误，也是dns问题导致。")]),t._v(" "),e("blockquote",[e("p",[t._v("kex_exchange_identification: Connection closed by remote host\nConnection closed by UNKNOWN port 65535\nfatal: Could not read from remote repository.")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# windows上一般刷新dns缓存即可解决")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cmd或powershell中输入以下命令即可")]),t._v("\n$ ipconfig /flushdns\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# linux中直接重启网络配置即可（以下为raspbian系统重启命令，各os不一样）")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),t._v(" networking restart\n")])])]),e("h3",{attrs:{id:"远程仓库配置ssh-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库配置ssh-key"}},[t._v("#")]),t._v(" 远程仓库配置ssh key")]),t._v(" "),e("ol",[e("li",[t._v("生成")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('ssh-keygen -t rsa -C "平台注册邮箱号"\n')])])]),e("ol",{attrs:{start:"2"}},[e("li",[e("p",[t._v("三次回车即可便生成了")])]),t._v(" "),e("li",[e("p",[t._v("查看公钥")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("cat ~/.ssh/id_rsa.pub\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[e("p",[t._v("将公钥添加到对应平台上")])]),t._v(" "),e("li",[e("p",[t._v("测试是否成功")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ssh -T git@github.com\n")])])]),e("h3",{attrs:{id:"修改已经提交的author信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改已经提交的author信息"}},[t._v("#")]),t._v(" 修改已经提交的author信息")]),t._v(" "),e("blockquote",[e("p",[t._v("使用rebase命令")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('//此处n代表重塑(类似重新提交)前几个版本\ngit rebase -i HEAD~n\n//但是上一步时, 如果工作区存在未提交的内容则可以使用git stash暂存工作区内容\ngit stash\n//取出stash内容\ngit stash pop\n//rebase后会出现一个文件, 用于修改git接下来进行的操作, 这里可以修改成pick,edit等方式, 修改完后保存确定.\npick表示会直接commit\nedit表示要修改这次提交\n//完成修改author的任务.\ngit commit --amend --author "xw <aa.hbl@gmail.com>"\n//完成修改操作文件后, 使用continue让git继续操作\ngit rebase --continue\n')])])]),e("h3",{attrs:{id:"修改name-email等config信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改name-email等config信息"}},[t._v("#")]),t._v(" 修改name/email等config信息")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('//查看git全局配置信息\ngit config --list\n//设置指定git配置信息\ngit config --global user.name ""\ngit config --global user.email ""\n')])])]),e("h3",{attrs:{id:"生成新的ssh-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生成新的ssh-key"}},[t._v("#")]),t._v(" 生成新的ssh key")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('//会覆盖之前的key, 也可以使用指定生成key名, 来覆盖.\n$ cd ~/.ssh/\n$ ssh-keygen -t rsa -C "xxxx@email.com"\n')])])]),e("h3",{attrs:{id:"配置github多账号使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置github多账号使用"}},[t._v("#")]),t._v(" 配置github多账号使用")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('//生成key, 这里-f是指定生成key的路径, 如果不指定也想给生成文件取名(不使用默认名称), 可以在此命令后, 第一个提示进行输入.\n$ ssh-keygen -t rsa -C "xxxx@email.com" -f .ssh/id_rsa_xxx\n//将key添加到ssh agent上, 因为不是使用默认的方式, 所以需要使用让agent来确定使用哪一个key\n$ ssh-add .ssh/id_rsa_xxx\n//如果上一步添加失败, 报错Could not open a connection to your authentication agent, 则执行如下命令\n$ ssh-agent bash\n//创建config文件, 如果存在则跳过此步骤\n$ touch config\n//编辑config文件, 输入内容如下, 指定哪个host使用哪个公钥\n\t\t# 默认的 github 用户\n\t\tHost github.com\n\t\tport 22​\n\t\t HostName github.com\n\t\t User git\n\t\t IdentityFile ~/.ssh/id_rsa\n\t\t \n\t\t# 使用 id_rsa_2 验证的 github 别名\n\t\tHost blog.github\n\t\tport 22​​\n\t\t HostName github.com\n\t\t User git\n\t\t IdentityFile ~/.ssh/id_rsa_blog_github\n//测试是否成功\n$ ssh -T blog.github\n')])])]),e("h3",{attrs:{id:"使用ssh连接替换https连接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用ssh连接替换https连接"}},[t._v("#")]),t._v(" 使用ssh连接替换https连接")]),t._v(" "),e("ol",[e("li",[t._v("先查看远程仓库url")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git remote -v\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("删除远程连接")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git remote rm origin\ngit remote remove origin\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("添加远程ssh连接")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git remote add origin SSH地址\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[e("p",[t._v("要完成最后一步必须得本地生成公钥添加到对应平台上去.")])]),t._v(" "),e("li",[e("p",[t._v("与本地分支进行关联并提交内容到远程仓库")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git push --set-upstream origin 本地分支名\n")])])]),e("h3",{attrs:{id:"git-pull时出现unable-to-get-local-issuer-certificate报错"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-pull时出现unable-to-get-local-issuer-certificate报错"}},[t._v("#")]),t._v(" git pull时出现unable to get local issuer certificate报错")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("使用命令关闭ssl验证\ngit config --global http.sslVerify false\n")])])]),e("h3",{attrs:{id:"gitk-git-gui中文乱码问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitk-git-gui中文乱码问题"}},[t._v("#")]),t._v(" gitk/git gui中文乱码问题")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git config --global gui.encoding utf-8\n")])])]),e("h3",{attrs:{id:"忽略文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#忽略文件"}},[t._v("#")]),t._v(" 忽略文件")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("将path写入到gitignore中")])]),t._v(" "),e("li",[e("p",[t._v("本地建一个私有的gitignore")])])]),t._v(" "),e("p",[t._v("//使用如下命令配置\ngit config --global core.excludesfile {path}")]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[e("p",[t._v("直接将本地要忽略的文件添加到.git/info/exclude中")])]),t._v(" "),e("li",[e("p",[t._v("针对已跟踪的文件, 使用--assume-unchanged来忽略")])])]),t._v(" "),e("p",[t._v("//忽略\ngit update-index --assume-unchanged {path}\n//恢复\ngit update-index --no-assume-unchanged {path}")]),t._v(" "),e("ol",{attrs:{start:"5"}},[e("li",[t._v("如果某些文件需要被提交到仓库中以供使用, 但每个人都可能会有不同的修改, 个人修改不能提交到仓库中.")])]),t._v(" "),e("blockquote",[e("p",[t._v("将需要提交的文件加上后缀.bak/.tamplate等, 然后个人pull下来后修改去掉这个后缀使用, 并且.gitignore中添加使用时的文件path")])]),t._v(" "),e("p",[t._v("下文参考来源:https://blog.csdn.net/DaSunWarman/article/details/79384307")]),t._v(" "),e("p",[t._v("git update-index –assume-unchanged –path 可以忽略文件\ngit update-index –no-assume-unchanged –path 可以取消忽略文件\n但是忽略的文件多了，想找出所有被忽略的文件，暂时找到下面的办法，")]),t._v(" "),e("p",[t._v("git ls-files -v | grep '^h\\ '\n提取文件路径，方法如下")]),t._v(" "),e("p",[t._v("git ls-files -v | grep '^h\\ ' | awk '{print $2}'\n所有被忽略的文件，取消忽略的方法，如下")]),t._v(" "),e("p",[t._v("git ls-files -v | grep '^h' | awk '{print $2}' |xargs git update-index --no-assume-unchanged")]),t._v(" "),e("h3",{attrs:{id:"从远程clone时指定文件夹名-不用项目名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从远程clone时指定文件夹名-不用项目名"}},[t._v("#")]),t._v(" 从远程clone时指定文件夹名（不用项目名）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git clone <Repo> <指定文件夹名>\n")])])]),e("h2",{attrs:{id:"日常操作【查看】"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#日常操作【查看】"}},[t._v("#")]),t._v(" 日常操作【查看】")]),t._v(" "),e("h3",{attrs:{id:"查看某个文件的详细修改记录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看某个文件的详细修改记录"}},[t._v("#")]),t._v(" 查看某个文件的详细修改记录")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git log -p <files>\n")])])]),e("h3",{attrs:{id:"git-status说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-status说明"}},[t._v("#")]),t._v(" git status说明")]),t._v(" "),e("ul",[e("li",[t._v("处于暂存区的文件状态:：staged(已暂存)；处于工作区的文件状态:：untrack(未跟踪)、modified(已修改)")]),t._v(" "),e("li",[t._v("工作区中的空目录不会被git追踪")])]),t._v(" "),e("h3",{attrs:{id:"优化git-log输出样式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化git-log输出样式"}},[t._v("#")]),t._v(" 优化git log输出样式")]),t._v(" "),e("blockquote",[e("p",[t._v("由于"),e("code",[t._v("git log")]),t._v("输出的内容比较乱, 特别是当提交信息比较长的时候, 整个显示效果就大打折扣了, 因此需要使用"),e("code",[t._v("--pretty=format")]),t._v("优化输出格式")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 直接使用\n$ git log --pretty=format:'%Cblue%h%Creset %<(40,trunc)%s [%C(green)%<(21,trunc)%ai%x08%x08%Creset %Cred%an%Creset%C(yellow)%d%Creset]'\n\n# 将其设置成alias\n$ git config alias.l \"log --pretty=format:'%Cblue%h%Creset %<(40,trunc)%s [%C(green)%<(21,trunc)%ai%x08%x08%Creset %Cred%an%Creset%C(yellow)%d%Creset]'\"\n")])])]),e("h2",{attrs:{id:"日常操作【分支、拉取、更新】"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#日常操作【分支、拉取、更新】"}},[t._v("#")]),t._v(" 日常操作【分支、拉取、更新】")]),t._v(" "),e("h3",{attrs:{id:"远程和本地都新建了一个仓库-但两个仓库都进行了初始化操作-此时无法同步两个仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#远程和本地都新建了一个仓库-但两个仓库都进行了初始化操作-此时无法同步两个仓库"}},[t._v("#")]),t._v(" 远程和本地都新建了一个仓库, 但两个仓库都进行了初始化操作, 此时无法同步两个仓库")]),t._v(" "),e("blockquote",[e("p",[t._v("此时相当于两个独立的仓库, 本地仓库进行过提交, 远程仓库也初始化了(gitee中勾选了初始化)")])]),t._v(" "),e("blockquote",[e("p",[t._v("这种情况下, 本地执行git push没有用, 会提示你要使用git push --set-upstream origin master, 但是此时会\n告诉你远程库的内容与你的不一样, 其实是判断commit数, 这时会提示你要git pull试试, 结果还是各种错误提示.")])]),t._v(" "),e("p",[t._v("此时其实需要将两个仓库关联起来, 利用pull合并成一个仓库")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//忽略历史进行拉取关联\ngit pull origin master --allow-unrelated-histories\n")])])]),e("p",[t._v("之后就可以正常操作了, 提交到远程仓库中")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git push --set-upstream origin master\n")])])]),e("h3",{attrs:{id:"更新远程仓库的单个文件-指定文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更新远程仓库的单个文件-指定文件"}},[t._v("#")]),t._v(" 更新远程仓库的单个文件/指定文件")]),t._v(" "),e("blockquote",[e("p",[t._v("先更新本地的远程仓库origin/master, 然后从本地origin拉取指定文件回来(git checkout origin/master -- filename)")])]),t._v(" "),e("h3",{attrs:{id:"查看所有的分支-包括远程分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看所有的分支-包括远程分支"}},[t._v("#")]),t._v(" 查看所有的分支, 包括远程分支")]),t._v(" "),e("ul",[e("li",[t._v("a是查看所有分支, 包含远程分支")]),t._v(" "),e("li",[t._v("v给予简单说明, 能看到版本号和commit msg")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git branch -av\n")])])]),e("h3",{attrs:{id:"拉取指定的远程分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#拉取指定的远程分支"}},[t._v("#")]),t._v(" 拉取指定的远程分支")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" git fetch origin master\n")])])]),e("h3",{attrs:{id:"合并指定的远程分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合并指定的远程分支"}},[t._v("#")]),t._v(" 合并指定的远程分支")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" git merge origin/master\n")])])]),e("h3",{attrs:{id:"切换其他远程分支-拉取远程没有的分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#切换其他远程分支-拉取远程没有的分支"}},[t._v("#")]),t._v(" 切换其他远程分支，拉取远程没有的分支")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//此处dev是指本地创建的分支, origin/dev是指远程分支.\n$ git checkout -b dev origin/dev\n")])])]),e("h3",{attrs:{id:"新建分支的几种方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#新建分支的几种方式"}},[t._v("#")]),t._v(" 新建分支的几种方式")]),t._v(" "),e("ul",[e("li",[t._v("此方式不会切换到分支上, 是从当前分支复制出一个分支\n"),e("code",[t._v("git branch 分支名")])]),t._v(" "),e("li",[t._v("创建并切换到某分支上\n"),e("code",[t._v("git checkout -b 分支名")])]),t._v(" "),e("li",[t._v("不存在则创建并切换到某分支上\n"),e("code",[t._v("git checkout -B 分支名")])])]),t._v(" "),e("h3",{attrs:{id:"修改分支名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改分支名"}},[t._v("#")]),t._v(" 修改分支名")]),t._v(" "),e("ol",[e("li",[t._v("本地修改分支名")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git branch -m oldName newName\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("如果修改远程分支, 则删除远程分支, 再修改本地分支重推上远程")])]),t._v(" "),e("h3",{attrs:{id:"删除分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除分支"}},[t._v("#")]),t._v(" 删除分支")]),t._v(" "),e("ul",[e("li",[t._v("所有删除分支的操作都必须切换到其他分支上进行\n"),e("code",[t._v("git branch -d 分支名")])]),t._v(" "),e("li",[t._v("强制删除\n"),e("code",[t._v("git branch -D 分支名")])])]),t._v(" "),e("h3",{attrs:{id:"git批量删除本地分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git批量删除本地分支"}},[t._v("#")]),t._v(" git批量删除本地分支")]),t._v(" "),e("p",[t._v("要将对应要排除的分支都加在条件中, 或者不用grep -v反选.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git branch -a | grep -E -v 'master|V2|remotes' | xargs git branch -d\n")])])]),e("h2",{attrs:{id:"日常操作【提交、推送】"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#日常操作【提交、推送】"}},[t._v("#")]),t._v(" 日常操作【提交、推送】")]),t._v(" "),e("h3",{attrs:{id:"push-u-的用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#push-u-的用法"}},[t._v("#")]),t._v(" push -u 的用法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//将当前分支推到origin上\n$ git push origin\n//如果当前分支与多个主机有关联, 则需要-u来指定, 指定之后就可以只使用: git push了.\n$ git push -u origin master\n")])])]),e("h3",{attrs:{id:"git-add-u-git-add-a"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-add-u-git-add-a"}},[t._v("#")]),t._v(" git add -u/git add -A")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//提交所有的变化, 不包括删除文件\ngit add .\n//提交所有被删除和修改的文件\ngit add -u == git add --update\n//提交所有的文件, 包括删除, 是上面两者的集合\ngit add -A == git add --all\n")])])]),e("p",[t._v("git version 2.x:\n"),e("img",{attrs:{src:"https://i.loli.net/2019/03/21/5c93a0518d800.png",alt:"image.png"}})]),t._v(" "),e("h3",{attrs:{id:"有本地分支-没有远程分支-将本地推到远程上"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有本地分支-没有远程分支-将本地推到远程上"}},[t._v("#")]),t._v(" 有本地分支, 没有远程分支, 将本地推到远程上")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//此时已经切换到local_branch上\ngit push origin local_branch:remote_branch\n")])])]),e("h3",{attrs:{id:"推送项目到新建的gitlab上"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#推送项目到新建的gitlab上"}},[t._v("#")]),t._v(" 推送项目到新建的gitlab上")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//初始化本地项目为git项目\n$ git init\n//将本地项目进行本地提交\n//添加远程分支关联\n$ git remote add origin ssh:xxxxx.git\n//如果添加有误, 移除远程分支关联\n$ git remote remove origin\n//push代码到remote上\n$ git push -u origin --all\n//push所有标签到remote上\n$ git push -u origin --tags\n")])])]),e("h3",{attrs:{id:"项目提交远程仓库-但历史记录包含敏感信息或需要清空历史记录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目提交远程仓库-但历史记录包含敏感信息或需要清空历史记录"}},[t._v("#")]),t._v(" 项目提交远程仓库, 但历史记录包含敏感信息或需要清空历史记录")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("如果直接提交远程仓库, 则会将历史记录一并提交")])]),t._v(" "),e("li",[e("p",[t._v("新建一个独立的分支并检出")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//这个分支是干净的, 并且没有提交过任何东西的\ngit checkout --orphan newbranch\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("将工作区的代码提交到新的分支中")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git add .    |  git add -A\ngit commit -m 'new commit'\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[t._v("删除原来的分支")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//推荐使用-D强制删除, 使用-d的话, 如果原来的分支有未合并或者其他情况就可能无法删除\ngit branch -D dev\n")])])]),e("ol",{attrs:{start:"5"}},[e("li",[t._v("重命名当前分支")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git branch -m newName\n")])])]),e("ol",{attrs:{start:"6"}},[e("li",[t._v("提交到远程仓库中就好了")])]),t._v(" "),e("h3",{attrs:{id:"提交合并到历史-非上一次-commit中"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#提交合并到历史-非上一次-commit中"}},[t._v("#")]),t._v(" 提交合并到历史(非上一次)commit中")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("git rebase -i xxx_id")])]),t._v(" "),e("li",[e("p",[t._v("找到需要更改的commit, 将行首的pick改成edit")])]),t._v(" "),e("li",[e("p",[t._v("更改文件(或者从stash中pop)")])]),t._v(" "),e("li",[e("p",[t._v("使用git add 改动的文件添加改动文件到暂存")])]),t._v(" "),e("li",[e("p",[t._v("使用git commit –amend追加改动到第一步中指定的commit上")])]),t._v(" "),e("li",[e("p",[t._v("使用git rebase –continue移动HEAD到最新的commit处")])])]),t._v(" "),e("p",[t._v("参考: https://blog.csdn.net/Nathan1987_/article/details/81675750")]),t._v(" "),e("h3",{attrs:{id:"提交合并到上一次commit中"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#提交合并到上一次commit中"}},[t._v("#")]),t._v(" 提交合并到上一次commit中")]),t._v(" "),e("ol",[e("li",[t._v("做好更改的内容")]),t._v(" "),e("li",[t._v("git add .")]),t._v(" "),e("li",[t._v("git commit --amend")])]),t._v(" "),e("h3",{attrs:{id:"git将多个commit合为一个"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git将多个commit合为一个"}},[t._v("#")]),t._v(" git将多个commit合为一个")]),t._v(" "),e("ol",[e("li",[t._v("使用rebase, commitId为想变基的前一个commitId")])]),t._v(" "),e("blockquote",[e("p",[t._v("git rebase -i [commitId]")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("p",[t._v("使用squash")])]),t._v(" "),e("li",[e("p",[t._v("如果提交到remote后, 不建议使用此命令")])])]),t._v(" "),e("h3",{attrs:{id:"git作为镜像仓库-一个项目推送到多个远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git作为镜像仓库-一个项目推送到多个远程仓库"}},[t._v("#")]),t._v(" git作为镜像仓库/一个项目推送到多个远程仓库")]),t._v(" "),e("p",[t._v("当有需要将一个项目推送到多个远程仓库, 则可以使用镜像仓库来解决.\nhttps://blog.csdn.net/hwangfantasy/article/details/77006016")]),t._v(" "),e("h2",{attrs:{id:"日常操作【暂存】"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#日常操作【暂存】"}},[t._v("#")]),t._v(" 日常操作【暂存】")]),t._v(" "),e("h3",{attrs:{id:"查看stash中的内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看stash中的内容"}},[t._v("#")]),t._v(" 查看stash中的内容")]),t._v(" "),e("blockquote",[e("p",[t._v("git stash show")])]),t._v(" "),e("h3",{attrs:{id:"stash的相关操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stash的相关操作"}},[t._v("#")]),t._v(" stash的相关操作")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('//存放内容到stash中\n$ git stash\n//取出stash中的内容\n$ git stash pop\n//暂存未跟踪或忽略的文件, 使用-u或者--include-untracked可以stash untracked文件\n//使用-a或者--all命令可以stash当前目录下的所有修改\n//将stash应用到当前工作目录, 但并不清除stash中内容\n$ git stash apply\n//清除所有stash\n$ git stash clear\n//清除指定的stash, xxx表示指定的stash, 可以通过list查看\n$ git stash drop xxx\n//查看所有的stash\n$ git stash list\n//保存时添加备注\n$ git stash save "完成user接口"\n')])])]),e("h3",{attrs:{id:"stash使用技巧"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stash使用技巧"}},[t._v("#")]),t._v(" stash使用技巧")]),t._v(" "),e("blockquote",[e("p",[t._v("add 那些你不想备份的文件（例如： git add file1.js, file2.js）\n调用 git stash –keep-index。只会备份那些没有被add的文件。\n调用 git reset 取消已经add的文件的备份，继续自己的工作。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//暂存 未add文件/untrack文件/, -u 表示暂存untrack.\n$ git stash save '备注' --keep-index -u\n")])])]),e("h3",{attrs:{id:"git-stash部分文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-stash部分文件"}},[t._v("#")]),t._v(" git stash部分文件")]),t._v(" "),e("p",[t._v("只能add部分文件后, 再使用git stash -k(keep index) 来暂存工作区中的内容")]),t._v(" "),e("p",[t._v("或者使用"),e("code",[t._v("git stash -p")]),t._v("，这里会出现交互式操作, 针对每个改动按照如下操作指定")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("y - stage this hunk\n   n - do not stage this hunk\n   q - quit; do not stage this hunk nor any of the remaining ones\n   a - stage this hunk and all later hunks in the file\n   d - do not stage this hunk nor any of the later hunks in the file\n   g - select a hunk to go to\n   / - search for a hunk matching the given regex\n   j - leave this hunk undecided, see next undecided hunk\n   J - leave this hunk undecided, see next hunk\n   k - leave this hunk undecided, see previous undecided hunk\n   K - leave this hunk undecided, see previous hunk\n   s - split the current hunk into smaller hunks\n   e - manually edit the current hunk\n   ? - print help\n")])])]),e("h2",{attrs:{id:"日常操作【撤销、回退】"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#日常操作【撤销、回退】"}},[t._v("#")]),t._v(" 日常操作【撤销、回退】")]),t._v(" "),e("h3",{attrs:{id:"撤销工作区所有的修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#撤销工作区所有的修改"}},[t._v("#")]),t._v(" 撤销工作区所有的修改")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//不会影响untracked file\n$ git checkout .\n")])])]),e("h3",{attrs:{id:"恢复工作区删除的文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#恢复工作区删除的文件"}},[t._v("#")]),t._v(" 恢复工作区删除的文件")]),t._v(" "),e("blockquote",[e("p",[t._v("工作区就是所有当前操作/浏览的文件的地方, 未add的文件只会存在于工作区.")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//指定文件\n$ git checkout -- <file>\n//所有文件\n$ git ls-files -d | xargs -i git checkout {}\n//或者\n$ git ls-files -d | xargs git checkout --\n")])])]),e("h3",{attrs:{id:"工作区做了修改-但没有提交到暂存区中-此时要撤销工作区的修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作区做了修改-但没有提交到暂存区中-此时要撤销工作区的修改"}},[t._v("#")]),t._v(" 工作区做了修改, 但没有提交到暂存区中, 此时要撤销工作区的修改")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//可以先使用git status查看状态, 此时会看到你修改的文件, 同时也会告诉你可以进行的操作, 这里就有checkout\n//使用checkout清空工作区的改动\ngit checkout -- fileName\n")])])]),e("h3",{attrs:{id:"恢复暂存区删除的文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#恢复暂存区删除的文件"}},[t._v("#")]),t._v(" 恢复暂存区删除的文件")]),t._v(" "),e("blockquote",[e("p",[t._v("暂存区里变动的文件, 就是只经过add, 没有commit的文件.")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//HEAD表示当前指针指向的本地仓库记录\n$ git reset HEAD <file>\n")])])]),e("h3",{attrs:{id:"恢复工作区所有被修改的文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#恢复工作区所有被修改的文件"}},[t._v("#")]),t._v(" 恢复工作区所有被修改的文件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//checkout只适用于未提交到暂存区的文件\n$ git ls-files -m | xargs git checkout --\n")])])]),e("h3",{attrs:{id:"删除git关联-本地代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除git关联-本地代码"}},[t._v("#")]),t._v(" 删除git关联(本地代码)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('//删除.git文件后, 目录下使用git命令还是有效, 证明能识别此处还是仓库目录, 只能下一步了.\n//一步到位\n$ find . -name ".git" | xargs rm -Rf\n')])])]),e("h3",{attrs:{id:"清除untracked-files"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清除untracked-files"}},[t._v("#")]),t._v(" 清除untracked files")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git clean -f\n\n// 连untracked目录也删掉\ngit clean -df\n\n")])])]),e("h3",{attrs:{id:"撤回add到暂存区中的文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#撤回add到暂存区中的文件"}},[t._v("#")]),t._v(" 撤回add到暂存区中的文件")]),t._v(" "),e("p",[t._v("-r代表文件夹")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git rm --cached -r filename\n")])])]),e("h2",{attrs:{id:"git中的概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git中的概念"}},[t._v("#")]),t._v(" git中的概念")]),t._v(" "),e("h3",{attrs:{id:"head"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#head"}},[t._v("#")]),t._v(" HEAD")]),t._v(" "),e("blockquote",[e("p",[t._v("表示活跃分支的游标, 你现在在哪儿, 它就指向哪儿.")])]),t._v(" "),e("h3",{attrs:{id:"fetch-head"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fetch-head"}},[t._v("#")]),t._v(" FETCH_HEAD")]),t._v(" "),e("blockquote",[e("p",[t._v("表示一个版本链接, 记录在本地文件中, 指向目前从远程仓库中取下来分支的末端(最新)版本.")])]),t._v(" "),e("h3",{attrs:{id:"origin-head-origin-master"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#origin-head-origin-master"}},[t._v("#")]),t._v(" origin/HEAD -> origin/master")]),t._v(" "),e("blockquote",[e("p",[t._v("HEAD代表一个头指针, 指向的分支代表此分支为默认分支.\n也可以删除它: git remote set-head origin -d")])]),t._v(" "),e("h3",{attrs:{id:"超前ahead-落后behind"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#超前ahead-落后behind"}},[t._v("#")]),t._v(" 超前ahead, 落后behind")]),t._v(" "),e("blockquote",[e("p",[t._v("commit了代码, 但是没有push, 就是ahead.\nremote上有更新, 但是没有pull, 就是behind.")])]),t._v(" "),e("h3",{attrs:{id:"staged-unstaged"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#staged-unstaged"}},[t._v("#")]),t._v(" staged, unstaged")]),t._v(" "),e("blockquote",[e("p",[t._v("staged表示暂存的文件\nunstaged表示未暂存的文件")])]),t._v(" "),e("h2",{attrs:{id:"配置git-bash的ssh代理-解决连接问题-https方式也同样提供解决方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置git-bash的ssh代理-解决连接问题-https方式也同样提供解决方案"}},[t._v("#")]),t._v(" 配置git bash的ssh代理，解决连接问题（https方式也同样提供解决方案）")]),t._v(" "),e("h3",{attrs:{id:"配置ssh方式代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置ssh方式代理"}},[t._v("#")]),t._v(" 配置ssh方式代理")]),t._v(" "),e("ol",[e("li",[t._v("在"),e("code",[t._v("~/.ssh")]),t._v("目录下建一个"),e("code",[t._v("config")]),t._v("文件，在其中编辑如下内容：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('Host github.com\n    User git\n    IdentityFile "C:\\Users\\jesse\\.ssh\\id_rsa"\n    ProxyCommand connect.exe -H 127.0.0.1:10809 %h %p\n')])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("下载connect.exe到config目录下。"),e("a",{attrs:{href:"https://github.com/xiongjiexi/xiongjiexi.github.io.vuepress/releases/download/git_connect/connect.exe",target:"_blank",rel:"noopener noreferrer"}},[t._v("下载地址"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("再使用"),e("code",[t._v("ssh -T github.com")]),t._v("命令测试，如果本地做了10809端口代理，就会走代理，此时速度就起飞了。")])]),t._v(" "),e("h3",{attrs:{id:"设置https方式代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设置https方式代理"}},[t._v("#")]),t._v(" 设置https方式代理")]),t._v(" "),e("p",[t._v("在git bash中输入设置即可")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('git config --global http.proxy "http://127.0.0.1:10809"\ngit config --global https.proxy "https://127.0.0.1:10809"\n')])])]),e("h2",{attrs:{id:"合理使用cherry-pick和rebase组合拳-谨慎使用revert"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合理使用cherry-pick和rebase组合拳-谨慎使用revert"}},[t._v("#")]),t._v(" 合理使用cherry-pick和rebase组合拳，谨慎使用revert")]),t._v(" "),e("p",[t._v("如果碰到紧急使用revert的情形，将容易导致此commit再也合并不上来了，因此最好谨慎使用revert命令， 建议使用reset+cherry-pick+rebase。")]),t._v(" "),e("ol",[e("li",[t._v("如果使用过revert命令，就先用reset回退到merge之前。")]),t._v(" "),e("li",[t._v("cherry-pick需要的那几个commit")]),t._v(" "),e("li",[t._v("rebase最先的commit（前开后闭区间）")]),t._v(" "),e("li",[t._v("比较diff比较两个分支的代码差异：git diff origin/master  （比较当前分支与origin/master区别）")])]),t._v(" "),e("h3",{attrs:{id:"cherry-pick的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cherry-pick的使用"}},[t._v("#")]),t._v(" cherry-pick的使用")]),t._v(" "),e("p",[t._v("指定一个commit：git cherry-pick {commitId}\n指定几个commit区间：\ngit cherry-pick {id1...id5}   （前开后闭区间，不包括id1）\ngit cherry-pick {id1^..id5}   （闭区间，包括id1）")]),t._v(" "),e("h3",{attrs:{id:"rebase的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rebase的使用"}},[t._v("#")]),t._v(" rebase的使用：")]),t._v(" "),e("p",[t._v("指定一个commit：git rebase -i {commitId} （不包括此commitId，重塑此commitId之后的提交）\n-i表示开启交互模式，commit是倒序排列，最新的显示在最下面，使用squash来将commit合并到前一个commit上。")]),t._v(" "),e("h2",{attrs:{id:"配置命令简写"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置命令简写"}},[t._v("#")]),t._v(" 配置命令简写")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("找到git安装目录")])]),t._v(" "),e("li",[e("p",[t._v("进入mingw64/etc")])]),t._v(" "),e("li",[e("p",[t._v("vim gitconfig")])]),t._v(" "),e("li")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pl = pull\nps = push\nl = log --stat\nc = commit -am\nca = commit --amend\n")])])]),e("ol",{attrs:{start:"5"}},[e("li",[t._v("wq")])]),t._v(" "),e("h2",{attrs:{id:"为什么merge时都建议加-no-ff"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么merge时都建议加-no-ff"}},[t._v("#")]),t._v(" 为什么merge时都建议加-no-ff")]),t._v(" "),e("blockquote",[e("p",[t._v("关键要理解ff(fast-forward)的意思")]),t._v(" "),e("p",[t._v("ff表示快进式合并, git在合并分支时如果发现可以顺着其中一个分支走下去的话, 就会简单的将HEAD指针右移, 完成"),e("code",[t._v("快进式合并(ff)")]),t._v(", 这样的合并, 不会产生一次commit.")]),t._v(" "),e("p",[t._v("-no-ff表示强行关闭快进式合并")])]),t._v(" "),e("h3",{attrs:{id:"fast-forward"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fast-forward"}},[t._v("#")]),t._v(" fast-forward")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("          A---B---C feature\n         /\nD---E---F master\n===============↓↓↓================\n          A---B---C feature\n         /         master\nD---E---F \n")])])]),e("h3",{attrs:{id:"no-ff"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#no-ff"}},[t._v("#")]),t._v(" -no-ff")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("          A---B---C feature\n         /\nD---E---F master\n===============↓↓↓================\n          A---B---C feature\n         /         \\\nD---E---F-----------G master\n")])])]),e("h2",{attrs:{id:"revert之后你应该这样做"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#revert之后你应该这样做"}},[t._v("#")]),t._v(" revert之后你应该这样做")]),t._v(" "),e("h3",{attrs:{id:"一般什么时候你使用revert"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一般什么时候你使用revert"}},[t._v("#")]),t._v(" 一般什么时候你使用revert?")]),t._v(" "),e("blockquote",[e("p",[t._v("一般我用到revert都是master分支代码需要回滚某个功能分支的commit时使用.")]),t._v(" "),e("p",[t._v("大家有其他用到的场景分享一下~")])]),t._v(" "),e("h3",{attrs:{id:"revert之后如何处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#revert之后如何处理"}},[t._v("#")]),t._v(" revert之后如何处理")]),t._v(" "),e("blockquote",[e("p",[t._v("一般在紧急revert之后, 修复完此commit代码问题, 后续还要重新应用此次提交")]),t._v(" "),e("p",[t._v("这时有两个方法")])]),t._v(" "),e("h4",{attrs:{id:"方法一-revert上次的revert"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法一-revert上次的revert"}},[t._v("#")]),t._v(" 方法一: revert上次的revert")]),t._v(" "),e("blockquote",[e("p",[t._v("因为revert实际上是向前做了一次commit, 因此可以revert那次"),e("code",[t._v("revert commit")])])]),t._v(" "),e("h4",{attrs:{id:"方法二-chrrey-pick之前revert的那次提交重新提交"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法二-chrrey-pick之前revert的那次提交重新提交"}},[t._v("#")]),t._v(" 方法二: chrrey-pick之前revert的那次提交重新提交")]),t._v(" "),e("h2",{attrs:{id:"如何查询所有的config设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何查询所有的config设置"}},[t._v("#")]),t._v(" # 如何查询所有的config设置")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git config [--global] --list\n")])])]),e("h2",{attrs:{id:"config的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#config的使用"}},[t._v("#")]),t._v(" config的使用")]),t._v(" "),e("h3",{attrs:{id:"如何筛选查询config设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何筛选查询config设置"}},[t._v("#")]),t._v(" 如何筛选查询config设置")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git config --get-regexp alias\n")])])]),e("h3",{attrs:{id:"如何设置config"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何设置config"}},[t._v("#")]),t._v(" 如何设置config")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git config [--global] alias.l 'log --oneline --graph'\n")])])]),e("h3",{attrs:{id:"删除config的设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除config的设置"}},[t._v("#")]),t._v(" 删除config的设置")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git config [--global] --unset alias.l\n")])])]),e("h3",{attrs:{id:"直接编辑config配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#直接编辑config配置"}},[t._v("#")]),t._v(" 直接编辑config配置")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 下面命令直接打开config配置文件进行编辑, 修改后直接保存即可\n$ git config -e\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);