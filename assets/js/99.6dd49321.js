(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{500:function(r,e,n){"use strict";n.r(e);var a=n(42),t=Object(a.a)({},(function(){var r=this,e=r.$createElement,n=r._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[n("h1",{attrs:{id:"关于跨域的问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关于跨域的问题"}},[r._v("#")]),r._v(" 关于跨域的问题")]),r._v(" "),n("p",[r._v("还没有在本地调试出跨域问题, 但是项目一般都是前后分离的, 熟悉这一块是非常必要的.")]),r._v(" "),n("h4",{attrs:{id:"跨域问题的起因"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#跨域问题的起因"}},[r._v("#")]),r._v(" 跨域问题的起因")]),r._v(" "),n("blockquote",[n("p",[r._v("网上搜索跨域, 就能得到原因, 都会告诉你, 这是浏览器的同源策略导致. 当我看了两篇文章后, 发现还是对跨域的起因有点懵逼, 因此在这里总结一下跨域.")])]),r._v(" "),n("h4",{attrs:{id:"什么情况下是跨域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么情况下是跨域"}},[r._v("#")]),r._v(" 什么情况下是跨域")]),r._v(" "),n("blockquote",[n("p",[r._v("浏览器打开一个前端页面, 上面有ajax请求另一个项目(域名?)的链接.此时就会出现跨域问题, 这是浏览器做出的安全控制.")])]),r._v(" "),n("h4",{attrs:{id:"测试跨域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试跨域"}},[r._v("#")]),r._v(" 测试跨域")]),r._v(" "),n("ol",[n("li",[r._v("启动一个前端项目或html页面, 里面写入ajax请求到其他域名")]),r._v(" "),n("li",[r._v("此处的ajax请求其他域名, 符合以下情况才会出现跨域问题, "),n("code",[r._v("同源策略是限制js和ajax的")]),r._v(", 即"),n("code",[r._v("协议+主机名+端口号")]),r._v("相同才是非跨域. 对于html其他的标签是不做控制的.")])]),r._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("- url不同端口\n- 不同域名\n- 协议不同\n")])])]),n("h4",{attrs:{id:"实际遇到跨域的场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实际遇到跨域的场景"}},[r._v("#")]),r._v(" 实际遇到跨域的场景")]),r._v(" "),n("blockquote",[n("p",[r._v("一般上线的项目中, 是不会遇到这种情况, 因为所有的服务通常在一个域名下. 你可能以为服务对应端口不同, 但从浏览器角度看, 是一样的, 因为你使用的是反向代理.\n在前后端项目开发过程中, 则会遇到跨域问题, 联调时, 前后端服务跑在各自环境中, 因此需要解决跨域问题.")])]),r._v(" "),n("h4",{attrs:{id:"跨域的解决方案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#跨域的解决方案"}},[r._v("#")]),r._v(" 跨域的解决方案")]),r._v(" "),n("p",[n("em",[r._v("1. jsonp")])]),r._v(" "),n("p",[n("em",[r._v("2. cors")])]),r._v(" "),n("p",[n("em",[r._v("3. 反向代理")])]),r._v(" "),n("h4",{attrs:{id:"spring解决跨域问题的方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring解决跨域问题的方法"}},[r._v("#")]),r._v(" spring解决跨域问题的方法")]),r._v(" "),n("p",[n("em",[r._v("1. 配置corsFilter")])]),r._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v('@Configuration\npublic class CorsConfig {\n\n    private CorsConfiguration corsConfig() {\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n        corsConfiguration.addAllowedOrigin("*");\n        corsConfiguration.addAllowedHeader("*");\n        corsConfiguration.addAllowedMethod("*");\n        corsConfiguration.setAllowCredentials(true);\n        corsConfiguration.setMaxAge(3600L);\n        return corsConfiguration;\n    }\n\n    @Bean\n    public CorsFilter corsFilter() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration("/**", corsConfig());\n        return new CorsFilter(source);\n    }\n\n}\n\n')])])]),n("p",[n("em",[r._v("2. 配置FilterRegistrationBean")])]),r._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v('@Bean\n    public FilterRegistrationBean<CorsFilter> corsFilter(){\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration config = new CorsConfiguration();\n        config.setAllowCredentials(true);\n        config.addAllowedOrigin("*");\n        config.addAllowedHeader("*");\n        config.addAllowedMethod("*");\n        source.registerCorsConfiguration("/**", config);\n        FilterRegistrationBean<CorsFilter> bean = new FilterRegistrationBean<>(new CorsFilter(source));\n        bean.setOrder(0);\n        return bean;\n    }\n')])])]),n("p",[n("em",[r._v("3. 配置WebMvcConfigurerAdapter")])]),r._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v('@Bean\n    public WebMvcConfigurer corsConfigurer() {\n        return new WebMvcConfigurerAdapter() {\n            @Override\n            public void addCorsMappings(CorsRegistry registry) {\n                registry.addMapping("/**")\n\t\t.allowedOrigins("*")\n                .allowCredentials(true)\n                .allowedMethods("*")\n                .allowedHeaders("*")\n                .maxAge(3600);\n            }\n        };\n    }\n/*以上方法提示过期, 不推荐使用, 因此有了以下方式, 继承WebMvcConfigurerAdapter*/\n@Configuration\npublic class WebConfig extends WebMvcConfigurerAdapter {\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping("/**");\n    }\n}\n/*但如果有拦截器, 会先进入拦截器, 如果被拦截住, 就不会进入这里了, 最终导致设置无效, 因此这种方式不推荐使用.*/\n')])])])])}),[],!1,null,null,null);e.default=t.exports}}]);