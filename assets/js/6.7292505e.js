(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{381:function(t,a,s){t.exports=s.p+"assets/img/image-20210802224243102.accac4f7.png"},382:function(t,a,s){t.exports=s.p+"assets/img/image-20210802225105209.f49e1078.png"},383:function(t,a,s){t.exports=s.p+"assets/img/image-20210802231745157.5804a401.png"},384:function(t,a,s){t.exports=s.p+"assets/img/image-20210802233106135.dd42942b.png"},457:function(t,a,s){"use strict";s.r(a);var n=s(42),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"算法基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#算法基础"}},[t._v("#")]),t._v(" 算法基础")]),t._v(" "),n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#java中的数据结构"}},[t._v("java中的数据结构")]),n("ul",[n("li",[n("a",{attrs:{href:"#treemap的使用"}},[t._v("TreeMap的使用")])])])]),n("li",[n("a",{attrs:{href:"#复杂度"}},[t._v("复杂度")]),n("ul",[n("li",[n("a",{attrs:{href:"#时间复杂度"}},[t._v("时间复杂度")])]),n("li",[n("a",{attrs:{href:"#参阅"}},[t._v("参阅")])]),n("li",[n("a",{attrs:{href:"#空间复杂度"}},[t._v("空间复杂度")])])])]),n("li",[n("a",{attrs:{href:"#双指针"}},[t._v("双指针")])]),n("li",[n("a",{attrs:{href:"#图"}},[t._v("图")]),n("ul",[n("li",[n("a",{attrs:{href:"#图-graph-中的几个基本概念"}},[t._v("图（graph）中的几个基本概念")])]),n("li",[n("a",{attrs:{href:"#如何存储图"}},[t._v("如何存储图？")])]),n("li",[n("a",{attrs:{href:"#如何遍历图"}},[t._v("如何遍历图？")])]),n("li",[n("a",{attrs:{href:"#如何判断一个有向图是否存在环"}},[t._v("如何判断一个有向图是否存在环？")])])])]),n("li",[n("a",{attrs:{href:"#栈"}},[t._v("栈")])]),n("li",[n("a",{attrs:{href:"#单调栈、单调队列"}},[t._v("单调栈、单调队列")])]),n("li",[n("a",{attrs:{href:"#回溯"}},[t._v("回溯")])]),n("li",[n("a",{attrs:{href:"#枚举"}},[t._v("枚举")])]),n("li",[n("a",{attrs:{href:"#优先队列"}},[t._v("优先队列")])]),n("li",[n("a",{attrs:{href:"#两个双端队列动态获取区间内最值"}},[t._v("两个双端队列动态获取区间内最值")])]),n("li",[n("a",{attrs:{href:"#并查集"}},[t._v("并查集")]),n("ul",[n("li",[n("a",{attrs:{href:"#并查集相关题目"}},[t._v("并查集相关题目")])]),n("li",[n("a",{attrs:{href:"#并查集模板"}},[t._v("并查集模板")])])])]),n("li",[n("a",{attrs:{href:"#前缀和"}},[t._v("前缀和")]),n("ul",[n("li",[n("a",{attrs:{href:"#前缀和题目"}},[t._v("前缀和题目")])])])]),n("li",[n("a",{attrs:{href:"#二分法、二分查找"}},[t._v("二分法、二分查找")])]),n("li",[n("a",{attrs:{href:"#拓扑排序"}},[t._v("拓扑排序")]),n("ul",[n("li",[n("a",{attrs:{href:"#kahn算法-贪心"}},[t._v("kahn算法（贪心）")])]),n("li",[n("a",{attrs:{href:"#拓扑dfs"}},[t._v("拓扑DFS")])]),n("li",[n("a",{attrs:{href:"#拓扑排序题目"}},[t._v("拓扑排序题目")])])])]),n("li",[n("a",{attrs:{href:"#动态规划"}},[t._v("动态规划")])]),n("li",[n("a",{attrs:{href:"#常用标记方式-数组"}},[t._v("常用标记方式-数组")])]),n("li",[n("a",{attrs:{href:"#用数组做映射和哈希表"}},[t._v("用数组做映射和哈希表")])]),n("li",[n("a",{attrs:{href:"#如果数组两两比较-循环时从下标1开始-可以避免最后多余判断"}},[t._v("如果数组两两比较，循环时从下标1开始，可以避免最后多余判断")])]),n("li",[n("a",{attrs:{href:"#解题时-懵逼时怎么办"}},[t._v("解题时，懵逼时怎么办")])]),n("li",[n("a",{attrs:{href:"#进制、数制"}},[t._v("进制、数制")]),n("ul",[n("li",[n("a",{attrs:{href:"#进制转换的方法"}},[t._v("进制转换的方法")])])])]),n("li",[n("a",{attrs:{href:"#位运算"}},[t._v("位运算")]),n("ul",[n("li",[n("a",{attrs:{href:"#位运算方式-按位运算"}},[t._v("位运算方式=按位运算")])]),n("li",[n("a",{attrs:{href:"#异或运算"}},[t._v("异或运算")])]),n("li",[n("a",{attrs:{href:"#与运算"}},[t._v("与运算")])]),n("li",[n("a",{attrs:{href:"#或运算"}},[t._v("或运算")])]),n("li",[n("a",{attrs:{href:"#非运算"}},[t._v("非运算")])]),n("li",[n("a",{attrs:{href:"#与等号一起的组合运算符"}},[t._v("与等号一起的组合运算符")])])])]),n("li",[n("a",{attrs:{href:"#移位运算"}},[t._v("移位运算")]),n("ul",[n("li",[n("a",{attrs:{href:"#左移位"}},[t._v("左移位")])])])]),n("li",[n("a",{attrs:{href:"#位运算在日常开发中的使用"}},[t._v("位运算在日常开发中的使用")]),n("ul",[n("li",[n("a",{attrs:{href:"#其他资料"}},[t._v("其他资料")])])])]),n("li",[n("a",{attrs:{href:"#topk问题"}},[t._v("TopK问题")]),n("ul",[n("li",[n("a",{attrs:{href:"#快速选择算法-求topk"}},[t._v("快速选择算法 求TopK")])])])]),n("li",[n("a",{attrs:{href:"#竞赛"}},[t._v("竞赛")])]),n("li",[n("a",{attrs:{href:"#算法课程"}},[t._v("算法课程")])]),n("li",[n("a",{attrs:{href:"#数算"}},[t._v("数算")]),n("ul",[n("li",[n("a",{attrs:{href:"#两位数乘法"}},[t._v("两位数乘法")])])])])])]),n("p"),t._v(" "),n("h2",{attrs:{id:"java中的数据结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java中的数据结构"}},[t._v("#")]),t._v(" java中的数据结构")]),t._v(" "),n("p",[n("strong",[t._v("哈希表：")]),t._v("\nhttps://www.cnblogs.com/chen-lhx/p/8432422.html")]),t._v(" "),n("ul",[n("li",[t._v("HashMap（无序，允许Key、value为null）")]),t._v(" "),n("li",[t._v("TreeMap（有序，默认Key升序）")]),t._v(" "),n("li",[t._v("LinkedHashMap（有序，按插入顺序记录）")]),t._v(" "),n("li",[t._v("LinkedList（有序集合）")])]),t._v(" "),n("h3",{attrs:{id:"treemap的使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#treemap的使用"}},[t._v("#")]),t._v(" TreeMap的使用")]),t._v(" "),n("h2",{attrs:{id:"复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#复杂度"}},[t._v("#")]),t._v(" 复杂度")]),t._v(" "),n("h3",{attrs:{id:"时间复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[t._v("#")]),t._v(" 时间复杂度")]),t._v(" "),n("h3",{attrs:{id:"参阅"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参阅"}},[t._v("#")]),t._v(" 参阅")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://blog.csdn.net/bengxu/article/details/80320546",target:"_blank",rel:"noopener noreferrer"}},[t._v("时间复杂度中的log（n）底数到底是多少？"),n("OutboundLink")],1),t._v(" "),n("a",{attrs:{href:"https://www.jianshu.com/p/7b2082df8968",target:"_blank",rel:"noopener noreferrer"}},[t._v("O(log n) 怎么算出来的"),n("OutboundLink")],1),t._v(" "),n("a",{attrs:{href:"https://github.com/xitu/gold-miner/blob/master/TODO/what-does-the-time-complexity-o-log-n-actually-mean.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("时间复杂度 O(log n) 意味着什么？"),n("OutboundLink")],1)]),t._v(" "),n("h3",{attrs:{id:"空间复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度"}},[t._v("#")]),t._v(" 空间复杂度")]),t._v(" "),n("h2",{attrs:{id:"双指针"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#双指针"}},[t._v("#")]),t._v(" 双指针")]),t._v(" "),n("p",[t._v("遍历右指针，左指针同时向右收缩："),n("a",{attrs:{href:"https://leetcode-cn.com/problems/subarray-product-less-than-k/",target:"_blank",rel:"noopener noreferrer"}},[t._v("713. 乘积小于K的子数组"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#图"}},[t._v("#")]),t._v(" 图")]),t._v(" "),n("h3",{attrs:{id:"图-graph-中的几个基本概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#图-graph-中的几个基本概念"}},[t._v("#")]),t._v(" 图（graph）中的几个基本概念")]),t._v(" "),n("ul",[n("li",[t._v("顶点（vertex）：图中的元素节点")]),t._v(" "),n("li",[t._v("边（edge）：两个顶点间存在的连接关系")]),t._v(" "),n("li",[t._v("度（degree）：与顶点相连接边的条数\n"),n("ul",[n("li",[t._v("入度：有多少条边指向此顶点")]),t._v(" "),n("li",[t._v("出度：有多少条边是以此顶点为起点指向其他顶点")])])]),t._v(" "),n("li",[t._v("带权图")]),t._v(" "),n("li",[t._v("稀疏图、稠密图")])]),t._v(" "),n("h3",{attrs:{id:"如何存储图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何存储图"}},[t._v("#")]),t._v(" 如何存储图？")]),t._v(" "),n("p",[n("strong",[t._v("邻接矩阵")])]),t._v(" "),n("p",[t._v("使用二维数组存储图，"),n("code",[t._v("adj[A][B] = 1")]),t._v("二维的两个下标表示从节点A到节点B存在一个有向边，若是无向图，则需要反过来同样表示"),n("code",[t._v("adj[B][A] = 1")]),t._v("。")]),t._v(" "),n("p",[t._v("邻接矩阵的优点是简单，缺点是浪费空间，若是稀疏图，则非常浪费空间。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(381),alt:"image-20210802224243102"}})]),t._v(" "),n("p",[n("strong",[t._v("邻接表、逆邻接表")])]),t._v(" "),n("p",[t._v("使用"),n("code",[t._v("Map<Integer, List<Integer>>")]),t._v("的结构存储，顶点作为hash表的key，与顶点相连的所有节点都存储到链表中。")]),t._v(" "),n("p",[t._v("邻接表可以很方便的查找一个顶点为起点，指向了多少个其他顶点，但是无法方便知道有哪些顶点指向某一个顶点，因此就有了"),n("code",[t._v("逆邻接表")]),t._v("。")]),t._v(" "),n("p",[t._v("逆邻接表中，同样是顶点作为hash表的key，但值是存储了所有指向顶点key的节点。")]),t._v(" "),n("p",[t._v("邻接表比邻接矩阵节约空间，但查找效率不及邻接矩阵，不过可以加红黑树优化（或者平衡二叉树、跳表、散列表等）。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(382),alt:"image-20210802225105209"}})]),t._v(" "),n("p",[n("strong",[t._v("大数据量常见如何存储图？")])]),t._v(" "),n("p",[t._v("利用数据分片，将顶点分片存储。")]),t._v(" "),n("p",[n("strong",[t._v("关系型数据库如何存储图？")])]),t._v(" "),n("p",[n("img",{attrs:{src:s(383),alt:"image-20210802231745157"}})]),t._v(" "),n("h3",{attrs:{id:"如何遍历图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何遍历图"}},[t._v("#")]),t._v(" 如何遍历图？")]),t._v(" "),n("p",[t._v("通常使用")]),t._v(" "),n("ul",[n("li",[t._v("BFS")]),t._v(" "),n("li",[t._v("DFS")])]),t._v(" "),n("h3",{attrs:{id:"如何判断一个有向图是否存在环"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何判断一个有向图是否存在环"}},[t._v("#")]),t._v(" 如何判断一个有向图是否存在环？")]),t._v(" "),n("ul",[n("li",[t._v("快慢指针（单向边找环）")]),t._v(" "),n("li",[t._v("递归、dfs")]),t._v(" "),n("li",[t._v("拓扑排序")])]),t._v(" "),n("h2",{attrs:{id:"栈"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[t._v("#")]),t._v(" 栈")]),t._v(" "),n("h2",{attrs:{id:"单调栈、单调队列"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单调栈、单调队列"}},[t._v("#")]),t._v(" 单调栈、单调队列")]),t._v(" "),n("p",[t._v("单调栈：指从栈顶到栈底是严格递增还是严格递减的栈。")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("单调递增")]),t._v(" "),n("ul",[n("li",[t._v("[5,4,3,2,1] 左边栈底，右边栈顶")]),t._v(" "),n("li",[t._v("当前元素 >= 栈顶元素，弹出栈顶元素，直到小于时，将当前元素放置栈顶。")]),t._v(" "),n("li",[t._v("当前元素 < 栈顶元素，放置栈顶。")]),t._v(" "),n("li",[t._v("如果向右遍历数组，能在栈中找到左边第一个"),n("strong",[t._v("大于")]),t._v("当前元素的值。")])])]),t._v(" "),n("li",[n("p",[t._v("单调递减")]),t._v(" "),n("ul",[n("li",[t._v("[1,2,3,4,5] 左边栈底，右边栈顶")]),t._v(" "),n("li",[t._v("当前元素 <= 栈顶元素，弹出栈顶元素，直到大于时，将当前元素放置栈顶。")]),t._v(" "),n("li",[t._v("当前元素 > 栈顶元素，放置栈顶。")]),t._v(" "),n("li",[t._v("如果向右遍历数组，能在栈中找到左边第一个"),n("strong",[t._v("小于")]),t._v("当前元素的值。")])])])]),t._v(" "),n("h2",{attrs:{id:"回溯"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#回溯"}},[t._v("#")]),t._v(" 回溯")]),t._v(" "),n("p",[t._v("回溯其实就是一种枚举，回溯一般可以构造成一个递归树。")]),t._v(" "),n("p",[t._v("求解组合问题时，如果要求解集不能重复，需要排序，相同的跳过相同的元素。")]),t._v(" "),n("p",[t._v("【46. 全排列】是典型的回溯算法题，其实是构建一个递归树")]),t._v(" "),n("h2",{attrs:{id:"枚举"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#枚举"}},[t._v("#")]),t._v(" 枚举")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("枚举三个数时，使用三层循环嵌套，每一层的指针起始位置等于上一层+1")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" k "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" k "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" k"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            \n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),n("h2",{attrs:{id:"优先队列"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优先队列"}},[t._v("#")]),t._v(" 优先队列")]),t._v(" "),n("h4",{attrs:{id:"例题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例题"}},[t._v("#")]),t._v(" 例题")]),t._v(" "),n("ul",[n("li",[n("h4",{attrs:{id:"_313-超级丑数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_313-超级丑数"}},[t._v("#")]),t._v(" "),n("a",{attrs:{href:"https://leetcode-cn.com/problems/super-ugly-number/",target:"_blank",rel:"noopener noreferrer"}},[t._v("313. 超级丑数"),n("OutboundLink")],1)])]),t._v(" "),n("li",[n("h4",{attrs:{id:"_264-丑数-ii"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_264-丑数-ii"}},[t._v("#")]),t._v(" "),n("a",{attrs:{href:"https://leetcode-cn.com/problems/ugly-number-ii/",target:"_blank",rel:"noopener noreferrer"}},[t._v("264. 丑数 II"),n("OutboundLink")],1)])])]),t._v(" "),n("h2",{attrs:{id:"两个双端队列动态获取区间内最值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#两个双端队列动态获取区间内最值"}},[t._v("#")]),t._v(" 两个双端队列动态获取区间内最值")]),t._v(" "),n("h2",{attrs:{id:"并查集"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#并查集"}},[t._v("#")]),t._v(" 并查集")]),t._v(" "),n("ul",[n("li",[t._v("可以用来判断图中是否有环")]),t._v(" "),n("li",[t._v("统计分组数")])]),t._v(" "),n("h3",{attrs:{id:"并查集相关题目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#并查集相关题目"}},[t._v("#")]),t._v(" 并查集相关题目")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("684. 冗余连接")])]),t._v(" "),n("li",[n("strong",[t._v("547. 省份数量")])])]),t._v(" "),n("h3",{attrs:{id:"并查集模板"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#并查集模板"}},[t._v("#")]),t._v(" 并查集模板")]),t._v(" "),n("p",[t._v("count记录孤立集合有多少，parent数组表示领头元素集合。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UnionFind")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" parent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UnionFind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        parent "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            parent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" parent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            parent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("parent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            p "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("connected")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" q"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("union")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" q"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" rp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" rq "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" rq"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        parent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rq"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        count"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"前缀和"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前缀和"}},[t._v("#")]),t._v(" 前缀和")]),t._v(" "),n("h3",{attrs:{id:"前缀和题目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前缀和题目"}},[t._v("#")]),t._v(" 前缀和题目")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("274. H 指数")])])]),t._v(" "),n("h2",{attrs:{id:"二分法、二分查找"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二分法、二分查找"}},[t._v("#")]),t._v(" 二分法、二分查找")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://xiongjiexi.github.io/villa/algorithm/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("移步：搜索算法"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"拓扑排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#拓扑排序"}},[t._v("#")]),t._v(" 拓扑排序")]),t._v(" "),n("p",[t._v("toposort")]),t._v(" "),n("p",[t._v("算法实现有：Kahn算法、DFS")]),t._v(" "),n("h3",{attrs:{id:"kahn算法-贪心"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#kahn算法-贪心"}},[t._v("#")]),t._v(" kahn算法（贪心）")]),t._v(" "),n("blockquote",[n("p",[t._v("pre[0] = {0, numcourses-1}\npre[1] = {0, numcourses-1}")]),t._v(" "),n("p",[t._v("map<n, degree> 统计入度")]),t._v(" "),n("p",[t._v("找出0度的，从0度的数开始，将其指向的所有数拿出来，每当一个顶点为0时，加入计数，并重复以上步骤，拿出其所有指向的数出来。")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toposortByKahn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" inDegree "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 统计每个顶点的入度")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" adj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" w "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" adj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// i->w")]),t._v("\n      inDegree"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("w"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedList")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" queue "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedList")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inDegree"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEmpty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"->"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" adj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" adj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      inDegree"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inDegree"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"拓扑dfs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#拓扑dfs"}},[t._v("#")]),t._v(" 拓扑DFS")]),t._v(" "),n("h3",{attrs:{id:"拓扑排序题目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#拓扑排序题目"}},[t._v("#")]),t._v(" 拓扑排序题目")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/find-eventual-safe-states/",target:"_blank",rel:"noopener noreferrer"}},[t._v("802. 找到最终的安全状态"),n("OutboundLink")],1),t._v(" "),n("a",{attrs:{href:""}},[t._v("207. 课程表")]),t._v(" "),n("a",{attrs:{href:""}},[t._v("210. 课程表 II")]),t._v(" "),n("a",{attrs:{href:""}},[t._v("457. 环形数组是否存在循环")])]),t._v(" "),n("h2",{attrs:{id:"动态规划"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态规划"}},[t._v("#")]),t._v(" 动态规划")]),t._v(" "),n("ul",[n("li",[t._v("序列DP")]),t._v(" "),n("li",[t._v("区间DP")]),t._v(" "),n("li",[t._v("数位DP")])]),t._v(" "),n("h2",{attrs:{id:"常用标记方式-数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用标记方式-数组"}},[t._v("#")]),t._v(" 常用标记方式-数组")]),t._v(" "),n("h2",{attrs:{id:"用数组做映射和哈希表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用数组做映射和哈希表"}},[t._v("#")]),t._v(" 用数组做映射和哈希表")]),t._v(" "),n("h2",{attrs:{id:"如果数组两两比较-循环时从下标1开始-可以避免最后多余判断"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如果数组两两比较-循环时从下标1开始-可以避免最后多余判断"}},[t._v("#")]),t._v(" 如果数组两两比较，循环时从下标1开始，可以避免最后多余判断")]),t._v(" "),n("h2",{attrs:{id:"解题时-懵逼时怎么办"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解题时-懵逼时怎么办"}},[t._v("#")]),t._v(" 解题时，懵逼时怎么办")]),t._v(" "),n("ul",[n("li",[t._v("想想有没有暴力解（朴素解）")]),t._v(" "),n("li",[t._v("简化问题，罗列基本情况，找最近的、重复的子问题，或者说寻找可以优化的过程。")]),t._v(" "),n("li",[t._v("分析需要优化的过程，先列出需要哪些特性，再思考哪些数据结构可以提供这些特性（仍然需要熟悉数据结构的特性）。")]),t._v(" "),n("li",[t._v("需要了解Java针对各种数据结构所提供的支持。")]),t._v(" "),n("li",[t._v("平时要多练习将题意转成另一种方便理解的变种，或者其他原题。")])]),t._v(" "),n("h2",{attrs:{id:"进制、数制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#进制、数制"}},[t._v("#")]),t._v(" 进制、数制")]),t._v(" "),n("p",[t._v("十进制使用最为广泛的原因与人类有10个手指头是密不可分的。")]),t._v(" "),n("p",[t._v("在我国古代使用过十六进制，成语"),n("code",[t._v("半斤八两")]),t._v("指的是八两是半斤，一斤就是十六两，也就是以十六为基数。")]),t._v(" "),n("p",[t._v("不同进制的前缀表示：")]),t._v(" "),n("ul",[n("li",[t._v("没有前缀表示的一般为十进制")]),t._v(" "),n("li",[t._v("二进制：0b")]),t._v(" "),n("li",[t._v("八进制：0o或0")]),t._v(" "),n("li",[t._v("十六进制：0x")])]),t._v(" "),n("p",[t._v("b、o、x分别是各自数制的英文单词：binary、octonary、hexadecimal")]),t._v(" "),n("p",[t._v("十进制英文：decimal")]),t._v(" "),n("p",[n("img",{attrs:{src:s(384),alt:"image-20210802233106135"}})]),t._v(" "),n("h3",{attrs:{id:"进制转换的方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#进制转换的方法"}},[t._v("#")]),t._v(" 进制转换的方法")]),t._v(" "),n("p",[n("strong",[t._v("1.换基法")])]),t._v(" "),n("p",[n("strong",[t._v("2.除余法")])]),t._v(" "),n("p",[n("strong",[t._v("3.按位拆分法、按位合并法")])]),t._v(" "),n("p",[n("strong",[t._v("4.数制转换图")])]),t._v(" "),n("h2",{attrs:{id:"位运算"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#位运算"}},[t._v("#")]),t._v(" 位运算")]),t._v(" "),n("h3",{attrs:{id:"位运算方式-按位运算"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#位运算方式-按位运算"}},[t._v("#")]),t._v(" 位运算方式=按位运算")]),t._v(" "),n("blockquote",[n("p",[t._v("按位运算符针对"),n("code",[t._v("布尔值")]),t._v("与逻辑运算符效果一样, 但是不会出现"),n("code",[t._v("短路")]),t._v("的情况.")])]),t._v(" "),n("blockquote",[n("p",[t._v("按位运算满足"),n("code",[t._v("交换律")]),t._v("和"),n("code",[t._v("结合律")])])]),t._v(" "),n("h3",{attrs:{id:"异或运算"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异或运算"}},[t._v("#")]),t._v(" 异或运算")]),t._v(" "),n("blockquote",[n("p",[t._v("相同的为0, 不同的为1, 因此被称为不进位的二进制加法.")]),t._v(" "),n("p",[t._v("异或的运算法则为：0⊕0=0，1⊕0=1，0⊕1=1，1⊕1=0（同为0，异为1）\n且满足交换律\n（即不进位加法）\n任何数与1异或，奇数-1，偶数+1。\n任何数与自己异或皆为自己。\n自己与自己异或")])]),t._v(" "),n("p",[t._v("异或的效果:")]),t._v(" "),n("ol",[n("li",[t._v("x^0")])]),t._v(" "),n("blockquote",[n("p",[t._v("无论x为什么, 都值都保持不变.")])]),t._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[t._v("x^1")])]),t._v(" "),n("blockquote",[n("p",[t._v("结果是将x值进行翻转")])]),t._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[t._v("x^x")])]),t._v(" "),n("blockquote",[n("p",[t._v("结果为0")])]),t._v(" "),n("p",[t._v("异或运算的用法:")]),t._v(" "),n("ol",[n("li",[t._v("判断两个值是否相等")])]),t._v(" "),n("blockquote",[n("p",[n("code",[t._v("a^b=0")]),t._v("则a与b相等, 因为必须每一位都相等, 最后结果才可能为0.")])]),t._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[t._v("指定某位进行翻转")])]),t._v(" "),n("blockquote",[n("p",[t._v("a. 将需要翻转的位设为1, 目标值与设定值进行^")]),t._v(" "),n("p",[t._v("b. 0或1的数取反使用异或^1")])]),t._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[t._v("交换两个值(不需要临时变量)")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("a=a^b\nb=b^a\na=a^b\n")])])]),n("ol",{attrs:{start:"4"}},[n("li",[t._v("用于加密解密")])]),t._v(" "),n("blockquote",[n("p",[t._v("用一个字符x对其原文的每一个小单位进行"),n("code",[t._v("^")]),t._v(", 则是加密, 再重复同样操作则是解密.")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("假设: result=a^x\n则result^x=a^x^x, result^x=a;\n")])])]),n("h3",{attrs:{id:"与运算"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#与运算"}},[t._v("#")]),t._v(" 与运算")]),t._v(" "),n("blockquote",[n("p",[t._v("只要有一个为0就为0")])]),t._v(" "),n("p",[t._v("与运算作用:")]),t._v(" "),n("ol",[n("li",[t._v("将某一位清零(置0)")])]),t._v(" "),n("p",[t._v("与运算的用法：")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("去掉最低位的1")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[t._v("n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 或者写作")]),t._v("\nn "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])]),t._v(" "),n("h3",{attrs:{id:"或运算"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#或运算"}},[t._v("#")]),t._v(" 或运算")]),t._v(" "),n("blockquote",[n("p",[t._v("只要有一个是1, 则为1")])]),t._v(" "),n("p",[t._v("或运算的效果:")]),t._v(" "),n("ol",[n("li",[t._v("x|0")])]),t._v(" "),n("blockquote",[n("p",[t._v("无论x为什么, 都值都保持不变, 这一点与异或"),n("code",[t._v("^")]),t._v("相同.")])]),t._v(" "),n("p",[t._v("或运算用法:")]),t._v(" "),n("ol",[n("li",[t._v("常用于关闭位, 将指定位置1")])]),t._v(" "),n("h3",{attrs:{id:"非运算"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#非运算"}},[t._v("#")]),t._v(" 非运算")]),t._v(" "),n("blockquote",[n("p",[t._v("进行取反, ~0=1, ~1=0")])]),t._v(" "),n("h3",{attrs:{id:"与等号一起的组合运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#与等号一起的组合运算符"}},[t._v("#")]),t._v(" 与等号一起的组合运算符")]),t._v(" "),n("blockquote",[n("p",[t._v("与关系运算一样, 可以配合"),n("code",[t._v("=")]),t._v("一起使用, 用于合并"),n("code",[t._v("运算及赋值")])])]),t._v(" "),n("p",[n("em",[t._v("1. &=")])]),t._v(" "),n("blockquote",[n("p",[t._v("为什么&=是获得余数??")])]),t._v(" "),n("p",[n("em",[t._v("2. |=")])]),t._v(" "),n("blockquote",[n("p",[t._v("为什么|=是没满右侧的数字则是右侧数字减一(右侧是1023则是这样).")])]),t._v(" "),n("hr"),t._v(" "),n("h2",{attrs:{id:"移位运算"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#移位运算"}},[t._v("#")]),t._v(" 移位运算")]),t._v(" "),n("h3",{attrs:{id:"左移位"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#左移位"}},[t._v("#")]),t._v(" 左移位")]),t._v(" "),n("blockquote",[n("p",[t._v("左移位规则: 丢弃最高位, 最低位补0.\n左移位的意义: 在没有溢出的前提下, 左移n位, 等于乘以2的n次方.")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("value << num\n")])])]),n("p",[t._v("value为被移位值\nnum是移动位数")]),t._v(" "),n("h2",{attrs:{id:"位运算在日常开发中的使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#位运算在日常开发中的使用"}},[t._v("#")]),t._v(" 位运算在日常开发中的使用")]),t._v(" "),n("ol",[n("li",[n("p",[n("code",[t._v("&")]),t._v("用来减去一定值.\n因为"),n("code",[t._v("&")]),t._v("可以将某一位置0, 所以可以达到"),n("code",[t._v("减法")]),t._v("的效果.")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("|")]),t._v("和"),n("code",[t._v("<<")]),t._v("用来赋值\n"),n("code",[t._v("x|0")]),t._v("结果不变, 所有可以用来赋值操作, 然后移位, 补零之后继续赋值.")])]),t._v(" "),n("li",[n("p",[t._v("利用一个int字段存储二进制数据, 一个字段就可以表示n个属性\n设计一个指定长度的二进制数据, 并将每一段设计为表达不同的内容, 利用"),n("code",[t._v("<<")]),t._v("和"),n("code",[t._v("|")]),t._v("来组合内容.\n利用"),n("code",[t._v("&")]),t._v("来拆分/取出数据.\n"),n("code",[t._v("int type = (1<<31) | (1<<16) |5")])])]),t._v(" "),n("li",[n("p",[t._v("用二进制数代替数组或者map。\n假设需要标记小写英文字母在一个数组中是否出现过，可以使用26位的二进制数标记："),n("code",[t._v("mask |= 1 << int_char")])])]),t._v(" "),n("li",[n("p",[t._v("两个数字进行或运算，相当于两个数每一个有1的位都会使用结果的对应位为1，可以理解成合并两个数。")])]),t._v(" "),n("li",[n("p",[t._v("可以通过"),n("code",[t._v("&")]),t._v("运算将一个数限制在"),n("code",[t._v("(2^n)-1")]),t._v("大小的范围内，该结果通过可以用作数组的下标（这就要求数据的大小是2^n），也就是针对数组取模。")]),t._v(" "),n("p",[t._v("参考Java中的ThreadLocal代码"),n("code",[t._v("int i = key.threadLocalHashCode & (len-1);")]),t._v("，i就是对key的hashcode取模后找到在数组中的位置。")])])]),t._v(" "),n("h3",{attrs:{id:"其他资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其他资料"}},[t._v("#")]),t._v(" 其他资料")]),t._v(" "),n("p",[n("a",{attrs:{href:"http://www.xqbase.com/computer/struct_bitboard.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("二进制表示一个棋盘"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"topk问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#topk问题"}},[t._v("#")]),t._v(" TopK问题")]),t._v(" "),n("p",[t._v("解决该问题有很多方法：")]),t._v(" "),n("ol",[n("li",[t._v("先排序，后遍历 O(nlogn)")]),t._v(" "),n("li",[t._v("优先队列、小顶堆 O(nlogk)")]),t._v(" "),n("li",[t._v("快速选择算法 平均O(n) 最坏O(n^2)")]),t._v(" "),n("li",[t._v("BFPRT 最坏 O(n)")])]),t._v(" "),n("h3",{attrs:{id:"快速选择算法-求topk"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#快速选择算法-求topk"}},[t._v("#")]),t._v(" 快速选择算法 求TopK")]),t._v(" "),n("p",[t._v("平均时间复杂度为O(n)")]),t._v(" "),n("p",[t._v("假设数组是已排序的，并且每次取pivot都是用最小的或者最大的，搜索范围只能缩小1，因此最坏时间复杂度为O(n^2)")]),t._v(" "),n("p",[t._v("快速选择只能找第k个，不能在包含重复数据的数组中找第k大的元素，但可以先去重。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("QuickSelect")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("quickSelect")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("quickSelect")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("quickSelect")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" lo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" hi"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [hi,lo]中随机取一个")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" p "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("floor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hi"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("lo"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" lo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 交换pivot到最高位")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hi"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义双指针i、j")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当j元素小于等于hi元素，交换i与j元素，i与j下标同时右移一位")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当大于时，仅j下标右移一位")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当遍历完一次后，所有小于等于hi元素的都在i下标的左边，i下标右边为大于hi元素的数")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" hi"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("hi"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            j"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 交换元素，以i为中心，左边都是小于等于i的，右边皆为大于i的")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断i是否为第k大的元素，如果不是，搜索范围缩小到左边或者右边继续递归")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hi"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("k"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" hi"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("k"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" hi"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("quickSelect")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" k"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hi"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("quickSelect")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hi"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" tmp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tmp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("QuickSelect")]),t._v(" qs "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("QuickSelect")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" res "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" qs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("quickSelect")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"竞赛"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#竞赛"}},[t._v("#")]),t._v(" 竞赛")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://codeforces.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("cf"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://www.topcoder.com/community/competitive-programming/",target:"_blank",rel:"noopener noreferrer"}},[t._v("topcoder"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"http://poj.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("poj"),n("OutboundLink")],1)])]),t._v(" "),n("h2",{attrs:{id:"算法课程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#算法课程"}},[t._v("#")]),t._v(" 算法课程")]),t._v(" "),n("p",[t._v("慕课网-yubobobo")]),t._v(" "),n("h2",{attrs:{id:"数算"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数算"}},[t._v("#")]),t._v(" 数算")]),t._v(" "),n("h3",{attrs:{id:"两位数乘法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#两位数乘法"}},[t._v("#")]),t._v(" 两位数乘法")]),t._v(" "),n("p",[t._v("十位数相同，个位数相加等于0时：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("xy1*xy2 = x*(x+1) 拼接 y1*y2\n例如：\n45*45 = 4*5 拼接 5*5 = 2025\n43*47 = 4*5 拼接 3*7 = 2021\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);