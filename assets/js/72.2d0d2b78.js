(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{471:function(a,t,s){"use strict";s.r(t);var e=s(42),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"arthas-阿里问题排查工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arthas-阿里问题排查工具"}},[a._v("#")]),a._v(" arthas(阿里问题排查工具)")]),a._v(" "),s("h2",{attrs:{id:"使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[a._v("#")]),a._v(" 使用")]),a._v(" "),s("p",[a._v("提供两种启动方式")]),a._v(" "),s("ol",[s("li",[a._v("使用arthas-boot.jar直接 java -jar启动")]),a._v(" "),s("li",[a._v("使用as.sh脚本启动")])]),a._v(" "),s("h2",{attrs:{id:"常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[a._v("#")]),a._v(" 常用命令")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("cmd")]),a._v(" "),s("th")])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("watch")]),a._v(" "),s("td",[a._v("观察指定方法调用情况")])]),a._v(" "),s("tr",[s("td",[a._v("tt")]),a._v(" "),s("td",[a._v("方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测")])]),a._v(" "),s("tr",[s("td",[a._v("trace")]),a._v(" "),s("td")]),a._v(" "),s("tr",[s("td",[a._v("profiler")]),a._v(" "),s("td",[a._v("能帮助生成火焰图，展示CPU的调用栈、显示CPU的繁忙程度")])]),a._v(" "),s("tr",[s("td",[a._v("dashboard")]),a._v(" "),s("td",[a._v("打开面板，能即时查看"),s("code",[a._v("Thread,Memory,GC,Runtime参数")])])]),a._v(" "),s("tr",[s("td",[a._v("jad")]),a._v(" "),s("td",[a._v("反编译类；同时也会打印出类的ClassLoader和Location")])]),a._v(" "),s("tr",[s("td",[a._v("history")]),a._v(" "),s("td",[a._v("打印历史执行的命令")])]),a._v(" "),s("tr",[s("td",[a._v("options")]),a._v(" "),s("td",[a._v("命令设置全局配置")])]),a._v(" "),s("tr",[s("td",[a._v("jvm")]),a._v(" "),s("td",[a._v("查看当前JVM信息")])])])]),a._v(" "),s("h2",{attrs:{id:"watch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#watch"}},[a._v("#")]),a._v(" watch")]),a._v(" "),s("p",[a._v("观察指定方法调用情况")]),a._v(" "),s("ul",[s("li",[a._v("该方法定义了4个观察点，如下；默认开启"),s("code",[a._v("-f")]),a._v("；注意：除了"),s("code",[a._v("-b")]),a._v("事件点"),s("code",[a._v("params")]),a._v("代表入参，其余事件点都代表出参，因此要注意"),s("strong",[a._v("方法可能会修改"),s("code",[a._v("params")])])])]),a._v(" "),s("ol",[s("li",[a._v("[b]在方法调用之前观察")]),a._v(" "),s("li",[a._v("[e]在方法异常之后观察")]),a._v(" "),s("li",[a._v("[s]在方法返回之后观察")]),a._v(" "),s("li",[a._v("[f]在方法结束之后(正常返回和异常返回)观察")])]),a._v(" "),s("p",[s("strong",[a._v("案例")]),a._v("\n查某个方法调用的入参、返回值和异常")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('$ watch demo.MathGame primeFactors "{params,target,throwExp}" -x 3\n')])])]),s("p",[a._v("观察第一个入参")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('$ watch demo.MathGame primeFactors "{params[0]}" -x 3\n')])])]),s("p",[a._v("按耗时过滤")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ watch demo.MathGame primeFactors '{params, returnObj}' '#cost>200' -x 2\n")])])]),s("p",[a._v("按条件过滤（params[0]是int类型）")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('$ watch demo.MathGame primeFactors "{params[0],target}" "params[0]<0"\n')])])]),s("p",[a._v("观察当前对象的某个属性（field_name是this对象的某个类属性）")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ watch demo.MathGame primeFactors 'target.field_name'\n")])])]),s("p",[s("strong",[a._v("常用参数")]),a._v("\n-x")]),a._v(" "),s("blockquote",[s("p",[a._v("代表参数深度，默认为1")])]),a._v(" "),s("p",[a._v("-n")]),a._v(" "),s("blockquote",[s("p",[a._v("执行几次，"),s("code",[a._v("-n 2")]),a._v(" 表示执行2次")])]),a._v(" "),s("h2",{attrs:{id:"tt"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tt"}},[a._v("#")]),a._v(" tt")]),a._v(" "),s("p",[a._v("方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测")]),a._v(" "),s("p",[s("strong",[a._v("案例")]),a._v("\n记录方法的调用现场")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ tt -t 类全限定名 方法名\n")])])]),s("p",[a._v("指定记录3次数，自动终止")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ tt -t -n "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n")])])]),s("p",[a._v("解决方法重载")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ tt -t *Test print params.length"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),s("p",[a._v("解决指定参数")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ tt -t *Test print params"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(".mobile"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"13989838402"')]),a._v("\n")])])]),s("p",[a._v("查看当前arthas会话的tt记录")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ tt -l\n")])])]),s("p",[a._v("查看某一次的记录的详细信息")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ tt -i "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1005")]),a._v("\n")])])]),s("p",[a._v("重调一次（replay-times重放次数，replay-interval重放间隔ms）")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ tt -i "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1005")]),a._v(" -p --replay-times"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" --replay-interval"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5000")]),a._v("\n")])])]),s("p",[s("strong",[a._v("与watch命令区别的意义")]),a._v("\n官方文档解释：")]),a._v(" "),s("blockquote",[s("p",[a._v("tt 命令是将当前环境的对象引用保存起来，但仅仅也只能保存一个引用而已。如果方法内部对入参进行了变更，或者返回的对象经过了后续的处理，那么在 tt 查看的时候将无法看到当时最准确的值。这也是为什么 watch 命令存在的意义。")])]),a._v(" "),s("h2",{attrs:{id:"trace"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#trace"}},[a._v("#")]),a._v(" trace")]),a._v(" "),s("p",[a._v("方法内部调用路径，并输出方法路径上的每个节点上耗时")]),a._v(" "),s("p",[s("strong",[a._v("案例")]),a._v("\n看方法调用路径")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ trace 类全限定名 方法名\n")])])]),s("p",[a._v("增加监控限制次数（3次）")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ trace -n "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" 类全限定名 方法名\n")])])]),s("p",[a._v("不跳过JDK方法（默认跳过）")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ trace --skipJDKMethod "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v(" 类全限定名 方法名\n")])])]),s("p",[a._v("据调用耗时过滤（耗时大于10ms才显示）")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ trace 类全限定名 方法名 "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'#cost>10'")]),a._v("\n")])])]),s("p",[s("strong",[a._v("实现原理")])]),a._v(" "),s("blockquote",[s("p",[a._v("trace实际上是在每一个invokevirtual 前后插入代码，然后统计调用的时间。\ntrace本身只能拿到当前method的字节码，所以它只能trace当前method里的 invokevirtual，再深层的invokevirtual，它并不能知道。")])]),a._v(" "),s("h2",{attrs:{id:"thread"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#thread"}},[a._v("#")]),a._v(" thread")]),a._v(" "),s("p",[a._v("查看当前线程信息，查看线程的堆栈")]),a._v(" "),s("p",[s("strong",[a._v("案例")]),a._v("\n展示所有线程信息")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ thread -all\n")])])]),s("p",[a._v("打印出当前最忙的前3个线程堆栈")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ thread -n "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n")])])]),s("p",[a._v("找出当前阻塞其他线程的线程（目前只支持找出synchronized关键字阻塞住的线程）")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ thread -b\n")])])]),s("p",[a._v("查看指定状态的线程")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ thread --state WAITING\n")])])]),s("p",[a._v("列出1000ms内最忙的3个线程栈")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ thread -n "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" -i "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000")]),a._v("\n")])])]),s("p",[a._v("显示指定线程的运行堆栈")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ thread "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),s("h2",{attrs:{id:"profiler"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#profiler"}},[a._v("#")]),a._v(" profiler")]),a._v(" "),s("p",[a._v("本质是使用async-profiler工具提供的能力：\n"),s("a",{attrs:{href:"https://github.com/jvm-profiling-tools/async-profiler",target:"_blank",rel:"noopener noreferrer"}},[a._v("async-profiler"),s("OutboundLink")],1),a._v("\n能帮助生成火焰图。\n在arm64机器上暂时无法使用arthas的profiler，因此直接")]),a._v(" "),s("h3",{attrs:{id:"使用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用方法"}},[a._v("#")]),a._v(" 使用方法")]),a._v(" "),s("p",[a._v("启动采样")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ profiler start\n")])])]),s("p",[a._v("获取已采集的sample的数量")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ profiler getSamples\n")])])]),s("p",[a._v("查看profiler状态（可知采样执行了多久时间）")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ profiler status\n")])])]),s("p",[a._v("停止profiler，生成svg格式结果")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ profiler stop --file /tmp/output.svg\n")])])]),s("h2",{attrs:{id:"jad"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jad"}},[a._v("#")]),a._v(" jad")]),a._v(" "),s("p",[a._v("反编译类；同时也会打印出类的ClassLoader和Location。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ jad 类全路径\n")])])]),s("h2",{attrs:{id:"options-全局配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#options-全局配置"}},[a._v("#")]),a._v(" options（全局配置）")]),a._v(" "),s("p",[a._v("命令设置全局配置")]),a._v(" "),s("ol",[s("li",[a._v("输出显示格式，配置为json\noptions json-format true")]),a._v(" "),s("li",[a._v("禁用子类匹配\noptions disable-sub-class true")])]),a._v(" "),s("h2",{attrs:{id:"火焰图-flame-graph"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#火焰图-flame-graph"}},[a._v("#")]),a._v(" 火焰图（Flame Graph）")]),a._v(" "),s("p",[a._v("展示CPU的调用栈、显示CPU的繁忙程度\nx轴=抽样次数\ny轴=调用栈（每层都是一个函数）")]),a._v(" "),s("h3",{attrs:{id:"可操作性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可操作性"}},[a._v("#")]),a._v(" 可操作性")]),a._v(" "),s("ol",[s("li",[a._v("鼠标悬浮在每一个函数上，会显示"),s("code",[a._v("完整的函数名、抽样抽中的次数、占据总抽样次数的百分比")]),a._v("。")]),a._v(" "),s("li",[a._v("点击每一个函数都可以放大显示当前调用栈")]),a._v(" "),s("li",[a._v("CTRL+F可以使用正则进行函数搜索")])]),a._v(" "),s("h3",{attrs:{id:"如何利用火焰图分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何利用火焰图分析"}},[a._v("#")]),a._v(" 如何利用火焰图分析")]),a._v(" "),s("ol",[s("li",[a._v("从底层看，先查看宽度大的函数（代表执行用时多或次数多），鼠标点击放大查看。")]),a._v(" "),s("li",[a._v("打开单个函数视图后，从顶层看，从宽度最大的一个函数顶进行分析。")])])])}),[],!1,null,null,null);t.default=r.exports}}]);