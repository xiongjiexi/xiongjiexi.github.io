(window.webpackJsonp=window.webpackJsonp||[]).push([[207],{617:function(t,e,a){"use strict";a.r(e);var r=a(42),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"共享变量可见性的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#共享变量可见性的作用"}},[t._v("#")]),t._v(" 共享变量可见性的作用")]),t._v(" "),a("h1",{attrs:{id:"如何保证共享变量可见性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何保证共享变量可见性"}},[t._v("#")]),t._v(" 如何保证共享变量可见性")]),t._v(" "),a("p",[t._v("\\1. 保证共享变量的可见性，使用volatile关键字修饰即可\n\\2. 保证共享变量是private，访问变量使用set/get方法，使用synchronized对方法加锁，此种方法不仅保证了可见性，也保证了线程安全\n\\3. 使用原子变量，例如：AtomicInteger等\n\\4. 最后一种不是办法的办法：保证多个线程是「串行执行」")])])}),[],!1,null,null,null);e.default=s.exports}}]);