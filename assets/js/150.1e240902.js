(window.webpackJsonp=window.webpackJsonp||[]).push([[150],{553:function(a,t,e){"use strict";e.r(t);var s=e(42),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"java8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java8"}},[a._v("#")]),a._v(" Java8")]),a._v(" "),e("h3",{attrs:{id:"参阅"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参阅"}},[a._v("#")]),a._v(" 参阅")]),a._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/zhoufanyang_china/article/details/87798829",target:"_blank",rel:"noopener noreferrer"}},[a._v("深入理解Java双冒号(::)运算符的使用"),e("OutboundLink")],1),a._v(" "),e("a",{attrs:{href:"https://www.cnblogs.com/tietazhan/p/7486937.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("java8 :: 用法 （JDK8 双冒号用法）"),e("OutboundLink")],1)]),a._v(" "),e("h3",{attrs:{id:"概要"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概要"}},[a._v("#")]),a._v(" 概要")]),a._v(" "),e("blockquote",[e("p",[a._v("本文主要用来梳理java8中仍未掌握的一些内容")])]),a._v(" "),e("h3",{attrs:{id:"默认方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#默认方法"}},[a._v("#")]),a._v(" 默认方法")]),a._v(" "),e("h4",{attrs:{id:"多继承时接口签名相同解决方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多继承时接口签名相同解决方案"}},[a._v("#")]),a._v(" 多继承时接口签名相同解决方案")]),a._v(" "),e("p",[a._v("解决冲突的三条规则")]),a._v(" "),e("ol",[e("li",[a._v("类中的方法优先级最高, 类或父类中的方法优先级高于其默认方法的优先级")]),a._v(" "),e("li",[a._v("如果第一条无法判断, 子接口的优先级更高; 函数签名相同时, 优先选择拥有最具体实现的默认方法.(B继承了A, 则B更具体.)")]),a._v(" "),e("li",[a._v("如果仍然无法判断, 则继承多接口的类必须显示的覆盖和调用期望的方法, 显示的选择哪个方法实现.")])]),a._v(" "),e("h4",{attrs:{id:"x-super-m"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#x-super-m"}},[a._v("#")]),a._v(" X.super.m(...)")]),a._v(" "),e("blockquote",[e("p",[a._v("Java8新引入语法来解决冲突的问题\nX为父接口的名.\nm为你希望调用父接口的哪个方法.")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('//当以下情况会出现冲突问题\npublic interface A {\nvoid hello(){\n sout("Hello from A");\n}\n}\n\npublic interface B {\nvoid hello(){\n sout("Hello from B");\n}\n}\n\n//此时C无法判断继承哪个方法.\npublic class C implements B, A {}\n\n//解决方法\npublic class C implements B, A {\nvoid hello(){\nB.super.hello();\n}\n}\n')])])]),e("h3",{attrs:{id:"optional"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#optional"}},[a._v("#")]),a._v(" Optional")]),a._v(" "),e("blockquote",[e("p",[a._v("Java8用Optional取代null")])]),a._v(" "),e("h4",{attrs:{id:"创建optional对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建optional对象"}},[a._v("#")]),a._v(" 创建Optional对象")]),a._v(" "),e("ol",[e("li",[a._v("声明一个空的Optional对象")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("Optional<Car> optCar = Optional.empty();\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[a._v("依据一个非空值创建Optional")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("Optional<Car> optCar = Optional.of(car);\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[a._v("可接受null的Optional")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("Optional<Car> optCar = Optional.ofNullable(car);\n")])])]),e("h4",{attrs:{id:"从optional对象获取值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从optional对象获取值"}},[a._v("#")]),a._v(" 从Optional对象获取值")]),a._v(" "),e("h3",{attrs:{id:"零散知识"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#零散知识"}},[a._v("#")]),a._v(" 零散知识")]),a._v(" "),e("h4",{attrs:{id:"java8的双冒号-运算符-方法引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java8的双冒号-运算符-方法引用"}},[a._v("#")]),a._v(" java8的双冒号(::)运算符--"),e("code",[a._v("方法引用")])]),a._v(" "),e("blockquote",[e("p",[a._v("其实"),e("code",[a._v("引用")]),a._v("就是代表此方法, "),e("code",[a._v("传递引用")]),a._v("就是"),e("code",[a._v("传递方法")])])]),a._v(" "),e("p",[a._v("用法意义")]),a._v(" "),e("blockquote",[e("p",[a._v("可以将方法做成一个参数")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("list.forEach(System.out::println);\n")])])]),e("p",[a._v("以下方式可以将方法单独封装成一个类")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("Consumer c = System.out::println;\nlist.forEach(x -> c.accept(x));\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);